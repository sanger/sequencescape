# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby27 < Parser::Base


  def version
    27
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-689,278,-108,911,461,-109,223,-689,-689,-689,215,216,278,-689,-689',
'810,-689,810,810,-106,-110,555,221,-107,-689,-689,596,910,598,271,223',
'-114,-108,839,970,-698,-689,-689,-110,-689,-689,-689,-689,-689,-114',
'-107,-106,555,555,-113,-111,-112,226,-105,225,568,851,837,562,829,226',
'-485,-108,-114,1076,-114,-689,-689,-689,-689,-689,-689,-689,-689,-689',
'-689,-689,-689,-689,-689,215,216,-689,-689,-689,-685,623,222,277,-114',
'-689,555,595,-689,597,226,215,216,-689,277,-689,267,-689,-689,226,-689',
'-689,-689,-689,-689,-584,-689,-689,-689,-100,-685,-686,-584,-584,-584',
'-108,-112,-584,-584,-584,-108,-584,-689,-97,-101,-689,-689,-98,-101',
'-584,-689,-584,-584,-584,120,-105,-99,-689,969,119,-110,-584,-584,-109',
'-584,-584,-584,-584,-584,-111,555,-110,555,-104,-102,-103,-110,-114',
'-107,-106,120,120,-114,-107,-106,119,119,1083,879,226,742,-584,-584',
'-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,120,880',
'-584,-584,-584,119,-584,-584,-686,1017,-584,805,120,-584,-584,832,-584',
'119,-584,120,-584,-698,-584,-584,119,-584,-584,-584,-584,-584,-113,-584',
'-587,-584,831,215,216,618,806,-587,-587,-587,98,99,-587,-587,-587,-584',
'-587,-112,-584,-584,-584,-584,-112,-584,-587,-584,-587,-587,-587,226',
'-584,657,1084,-584,-92,-100,-587,-587,-109,-587,-587,-587,-587,-587',
'-109,-698,-78,828,-102,-109,-111,120,-102,120,890,-111,119,120,119,1018',
'226,278,119,1143,-111,-111,-587,-587,-587,-587,-587,-587,-587,-587,-587',
'-587,-587,-587,-587,-587,618,226,-587,-587,-587,851,-587,-587,100,101',
'-587,811,-698,-587,-587,747,-587,226,-587,583,-587,-100,-587,-587,278',
'-587,-587,-587,-587,-587,-303,-587,928,-587,-102,810,-113,-303,-303',
'-303,1023,-113,727,-303,-303,273,-303,-587,226,-99,-587,-587,-587,-587',
'-303,-587,221,-587,1022,-111,583,-100,-587,271,-100,-587,-303,-303,277',
'-303,-303,-303,-303,-303,-102,545,-100,-102,547,-101,728,568,562,585',
'584,829,583,-591,273,-102,747,568,936,776,-591,569,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-683,277,-303,-303',
'-303,-99,622,98,99,226,-303,222,-590,-303,585,584,583,532,-303,-590',
'-303,492,-303,-303,778,-303,-303,-303,-303,-303,-303,-303,617,-303,-685',
'-101,-599,-303,-303,-303,585,584,-591,-303,-303,-99,-303,-303,-99,937',
'-303,-303,-587,-303,-303,-303,-598,1091,492,-587,-99,583,-303,-598,-683',
'-112,-303,-303,-587,-303,-303,-303,-303,-303,793,-101,-113,-590,-101',
'-100,585,584,599,-98,816,100,101,-683,-277,812,-101,-109,617,813,780',
'-107,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-97,532,-303,-303,-303,-106,622,-587,839,792,-303,583,-106,-303',
'583,585,584,581,-303,583,-303,944,-303,-303,583,-303,-303,-303,-303',
'-303,-303,-303,1091,-303,-599,792,779,-303,-303,-303,775,-109,-303,-303',
'-303,221,-303,-303,-104,693,-303,-303,1112,-103,-303,-303,-303,-303',
'-303,120,-113,1110,-303,-682,119,-112,-303,-303,-108,-303,-303,-303',
'-303,-303,765,585,584,581,585,584,581,583,-99,585,584,586,120,583,585',
'584,594,119,679,-107,-108,962,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,222,748,-303,-303,-303,-584,808,-303,545',
'-276,-303,547,-584,-303,-303,966,-303,-682,-303,120,-303,-584,-303,-303',
'119,-303,-303,-303,-303,-303,744,-303,221,-303,226,585,584,588,-304',
'1107,-682,585,584,590,743,-304,738,-303,573,-589,-303,-303,-303,-303',
'-304,-303,-589,-303,408,-689,885,851,-303,410,409,-112,-689,-689,-689',
'701,-584,-689,-689,-689,221,-689,264,265,215,216,226,220,-592,-689,-689',
'-689,-689,-689,120,-592,218,545,-689,119,547,-689,-689,222,-689,-689',
'-689,-689,-689,-304,-303,699,545,698,-342,544,-595,-303,263,262,-589',
'-342,-686,-595,885,851,-303,735,734,987,-342,-689,-689,-689,-689,-689',
'-689,-689,-689,-689,-689,-689,-689,-689,-689,222,988,-689,-689,-689',
'-689,807,-689,-592,116,-689,226,-689,-689,-689,991,-689,-685,-689,693',
'-689,-689,-689,-689,993,-689,-689,-689,-689,-689,-303,-689,-689,-689',
'-342,538,-595,226,221,-593,-689,-594,1074,1075,682,458,-593,-689,-594',
'-587,-689,-689,-689,-689,459,-689,-587,-689,-92,-689,215,216,-689,823',
'824,-110,-689,-689,-689,724,-689,1001,-689,-689,-303,-689,1002,226,1005',
'727,226,-303,226,-689,-689,1010,-686,-279,226,226,-303,108,107,109,110',
'-689,-689,226,-689,-689,-689,-689,-689,222,-593,226,-594,112,111,113',
'226,247,735,734,-587,1016,247,728,1019,247,98,99,247,226,323,-689,-689',
'-689,-689,-689,-689,-689,-689,-689,-689,-689,-689,-689,-689,-303,226',
'-689,-689,-689,226,623,226,221,-584,-689,627,273,-689,-596,1107,-584',
'616,-689,1031,-689,-596,-689,-689,573,-689,-689,-689,-689,-689,-596',
'-689,-689,-689,862,96,84,87,88,862,89,91,90,92,928,1035,1037,-689,85',
'95,-689,-689,1039,-689,727,-689,656,1041,86,100,101,226,-689,1043,1044',
'-110,300,74,75,76,11,62,615,222,-584,68,69,226,611,-596,72,607,70,71',
'73,32,33,77,78,239,1057,862,728,880,79,30,29,108,107,109,110,770,771',
'21,936,772,114,115,1059,10,50,302,12,112,111,113,102,61,104,103,105',
'1061,106,114,115,1063,98,99,46,47,45,247,251,252,253,254,264,265,259',
'260,255,256,-597,240,241,1065,1065,257,258,-597,42,226,606,35,724,-276',
'63,64,-597,604,65,603,37,244,727,250,49,246,245,600,242,243,263,262',
'248,22,249,84,1080,765,96,84,87,88,221,89,91,90,92,85,810,525,1082,85',
'95,575,261,735,734,86,523,67,728,86,100,101,1085,-597,43,44,300,74,75',
'76,11,62,567,810,566,68,69,400,562,507,72,1101,70,71,73,32,33,77,78',
'123,124,125,126,127,79,30,29,108,107,109,110,3,549,21,1108,222,548,226',
'612,10,50,302,12,112,111,113,102,61,104,103,105,1113,106,114,115,247',
'98,99,46,47,45,247,251,252,253,254,264,265,259,260,255,256,-294,240',
'241,535,529,257,258,-294,42,273,226,35,282,1120,63,64,-294,1121,65,526',
'37,244,519,250,49,246,245,518,242,243,263,262,248,22,249,226,-77,1128',
'96,84,87,88,-304,89,91,90,92,129,1131,-304,862,85,95,1133,261,1135,-250',
'1137,-304,67,1139,86,100,101,1139,-294,43,44,300,74,75,76,11,62,507',
'698,505,68,69,503,492,225,72,1152,70,71,73,32,33,77,78,123,124,125,126',
'127,79,30,29,108,107,109,110,1153,1154,21,1065,-304,1065,1065,612,10',
'50,302,12,112,111,113,102,61,104,103,105,463,106,114,115,462,98,99,46',
'47,45,247,251,252,253,254,264,265,259,260,255,256,221,240,241,460,1162',
'257,258,610,42,411,1131,35,1131,226,63,64,608,327,65,326,37,244,267',
'250,49,246,245,217,242,243,263,262,248,22,249,1139,-686,-685,96,84,87',
'88,221,89,91,90,92,226,214,571,213,85,95,212,261,129,1121,1131,573,67',
'1175,86,100,101,1139,222,43,44,300,74,75,76,11,62,1139,1139,1065,68',
'69,887,851,888,72,226,70,71,73,32,33,77,78,123,124,125,126,127,79,30',
'29,108,107,109,110,882,881,21,870,222,868,866,864,10,50,302,12,112,111',
'113,102,61,104,103,105,226,106,114,115,862,98,99,46,47,45,247,251,252',
'253,254,264,265,259,260,255,256,221,240,241,862,898,257,258,534,42,859',
'851,35,247,693,63,64,459,-278,65,273,37,244,226,250,49,246,245,273,242',
'243,263,262,248,22,249,226,693,507,96,84,87,88,221,89,91,90,92,505,841',
'565,,85,95,,261,,,,563,67,,86,100,101,,222,43,44,300,74,75,76,11,62',
',,,68,69,,,,72,,70,71,73,32,33,77,78,123,124,125,126,127,79,30,29,108',
'107,109,110,,,21,,222,,,,10,50,302,12,112,111,113,102,61,104,103,105',
',106,114,115,,98,99,46,47,45,247,251,252,253,254,264,265,259,260,255',
'256,,240,241,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245',
',242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,261',
',,,,67,,86,100,101,,,43,44,7,74,75,76,11,62,,,,68,69,,,,72,,70,71,73',
'32,33,77,78,,,,,,79,30,29,108,107,109,110,,1104,21,716,715,714,,717',
'10,50,9,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47',
'45,247,251,252,253,254,264,265,259,260,255,256,,240,241,,,257,258,,42',
',,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263,262,248,22,249',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,261,,,,,67,,86,100,101,,,43,44',
'7,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29',
'108,107,109,110,,719,21,716,715,714,,717,10,50,9,12,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,247,251,252,253,254,264',
'265,259,260,255,256,,240,241,,,257,258,,42,,,35,,,63,64,,,65,,37,244',
',250,49,246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90',
'92,,,,,85,95,,261,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68',
'69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,1104,21',
'716,715,714,,717,10,50,302,12,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,247,251,252,253,254,264,265,259,260,255,256,,240',
'241,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243',
'263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,226,261,,,',
',67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73',
'32,33,77,78,,,,,,79,30,29,108,107,109,110,,719,21,716,715,714,,717,10',
'50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
'719,,716,715,714,,717,,872,,719,,716,715,714,,717,876,,42,,,35,,,63',
'64,,247,65,719,37,716,715,714,49,717,872,,,,,,,22,,876,872,,96,84,87',
'88,,89,91,90,92,,,244,,85,95,246,245,,872,,,67,,86,100,101,,876,43,44',
'300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29',
'108,107,109,110,247,719,21,716,715,714,,717,10,50,302,12,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,247,,244,,,,246,245',
'872,242,243,,,,,,257,258,,42,,,35,,,63,64,,247,65,,37,244,,250,49,246',
'245,,242,243,,,248,22,249,,,,96,84,87,88,,89,91,90,92,,,244,,85,95,246',
'245,,242,243,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,',
'72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,247,,',
'10,50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47',
'45,247,-711,-711,-711,-711,264,265,244,,-711,-711,246,245,,,,257,258',
',42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263,262,248,22',
'249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,719,,716,715,714,67,717,86',
'100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77',
'78,872,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,247,-711,-711,-711,-711',
'264,265,,,-711,-711,,,,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250',
'49,246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,',
',72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10',
'50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
'247,251,252,253,254,264,265,259,260,255,256,,-711,-711,,,257,258,,42',
',,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263,262,248,22,249',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,300',
'74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108',
'107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105,,106',
'114,115,,98,99,46,47,45,247,251,252,253,254,264,265,259,260,255,256',
',-711,-711,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,',
'242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,',
',,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73',
'32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112',
'111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,247,251,252',
'253,254,264,265,259,260,255,256,,-711,-711,,,257,258,,42,,,35,,,63,64',
',,65,,37,244,,250,49,246,245,,242,243,263,262,248,22,249,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75,76',
'11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109',
'110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,247,251,252,253,254,264,265,,,255,256,,,,,,257,258,',
'42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263,262,248,22',
'249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43',
'44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30',
'29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,247,251,252,253,254,264,265,259,260',
'255,256,,-711,-711,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246',
'245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71',
'73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12',
'112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,247,-711',
'-711,-711,-711,264,265,,,-711,-711,,,,,,257,258,,42,,,35,,,63,64,,,65',
',37,244,,250,49,246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,',
'89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62',
',,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,',
',21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,247,-711,-711,-711,-711,264,265,,,-711,-711,,,,,,257,258',
',42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263,262,248,22',
'249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43',
'44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30',
'29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,247,251,252,253,254,264,265,259,,255',
'256,,,,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242',
'243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67',
',86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,247,,,,,,,,,,,,,,,,257',
'258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,,,248,22',
'249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43',
'44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30',
'29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,247,-711,-711,-711,-711,264,265,,,-711',
'-711,,,,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242',
'243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67',
',86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,247,-711,-711,-711,-711',
'264,265,,,-711,-711,,,,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250',
'49,246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,',
',72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10',
'50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
'247,,,,,,,,,,,,,,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246',
'245,,242,243,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,',
'86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,247,,,,,,,,,,,,,,,,257',
'258,,42,,,35,,,63,64,,,65,,37,244,,,49,246,245,,242,243,,,,22,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74',
'75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,247,,,,,,,,,,,,,,,,257,258,,42,,,304,,,63,64,,,65',
',37,244,,250,49,246,245,,242,243,,,,22,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,',
',,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10',
'50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
',,,,,,,,,,,,,,,,,,,42,,,304,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74',
'75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,42,,,35,,,63,64,,,65,,37,,,,49',
',,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101',
',,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,',
',79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61',
'104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,42,,,304',
',,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78',
',,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,',
',,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104',
'103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237',
',,63,64,,,65,,291,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90',
'92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73',
'32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32',
'33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32',
'33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,226,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32',
'33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,,,,67,,86,100,101,-690,,43,44,,,,-690,-690,-690,,,-690',
'-690,-690,,-690,,,,,,,,-690,-690,-690,-690,-690,,,,,,,,-690,-690,,-690',
'-690,-690,-690,-690,,,,,,,,,,,,,,,,,,,,,,,-690,-690,-690,-690,-690,-690',
'-690,-690,-690,-690,-690,-690,-690,-690,,,-690,-690,-690,,,-690,,,-690',
',,-690,-690,,-690,,-690,,-690,,-690,-690,,-690,-690,-690,-690,-690,',
'-690,-690,-690,,,,,,,,,,,,,,-690,,,-690,-690,-690,-690,,-690,-259,-690',
',,,,-690,-259,-259,-259,,,-259,-259,-259,,-259,,,,,,,,-259,-259,-259',
'-259,,,,,,,,,-259,-259,,-259,-259,-259,-259,-259,,,,,,,,,,,,,,,,,,,',
',,,-259,-259,-259,-259,-259,-259,-259,-259,-259,-259,-259,-259,-259',
'-259,,,-259,-259,-259,,,-259,,273,-259,,,-259,-259,,-259,,-259,,-259',
',-259,-259,,-259,-259,-259,-259,-259,,-259,-259,-259,,,,,,,,,,,,,,-259',
',,-259,-259,,-259,,-259,74,75,76,,62,,-259,,68,69,,,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32',
'33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,416,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90',
'92,,,,,85,95,,,,,,,67,,86,100,101,-420,,43,44,,,,-420,-420,-420,,,-420',
'-420,-420,,-420,,,,,,,,-420,-420,-420,-420,,,,,,,,,-420,-420,,-420,-420',
'-420,-420,-420,,,,,,,,,,,,,,,,,,,,,,,-420,-420,-420,-420,-420,-420,-420',
'-420,-420,-420,-420,-420,-420,-420,,,-420,-420,-420,,,-420,,273,-420',
',,-420,-420,,-420,,-420,,-420,,-420,-420,,-420,-420,-420,-420,-420,-310',
'-420,-420,-420,,,,-310,-310,-310,,,-310,-310,-310,,-310,-420,,,-420',
'-420,,-420,-310,-420,-310,-310,,,,,-420,,,,-310,-310,,-310,-310,-310',
'-310,-310,,,,,,,,,,,,,,,,,,,,,,,-310,-310,-310,-310,-310,-310,-310,-310',
'-310,-310,-310,-310,-310,-310,,,-310,-310,-310,,,-310,,282,-310,,,-310',
'-310,,-310,,-310,,-310,,-310,-310,,-310,-310,-310,-310,-310,,-310,,-310',
',,,,,,,,,,,,,-310,,,-310,-310,,-310,,-310,74,75,76,,62,,-310,,68,69',
',,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,',
',,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46,47,45',
',,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49,,,295,,,,,,236',
',,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49',
',,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67',
'62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291',
',289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,',
',,67,,86,100,101,-295,,43,44,,,,-295,-295,-295,,,-295,-295,-295,,-295',
',,,,,,,-295,,-295,-295,-295,,,,108,107,109,110,-295,-295,,-295,-295',
'-295,-295,-295,,,,,112,111,113,,,,,,,,,,,98,99,,,323,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295',
',,-295,,,-295,,,-295,-295,,-295,,-295,,-295,,-295,-295,,-295,-295,-295',
'-295,-295,,-295,,-295,,96,84,87,88,,89,91,90,92,,,,-295,85,95,-295,-295',
'-295,-295,,-295,656,-295,86,100,101,,-295,74,75,76,11,62,,,,68,69,,',
',72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10',
'50,,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,',
',,,,,,,,,,,,,,,,,,42,,,35,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44',
',72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,',
',,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46,47',
'45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,,,49,,,295,,,,,,236',
',,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
'295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67',
'62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322',
'108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,',
',,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76',
'67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29',
'108,107,109,110,,,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,',
',,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76',
'67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29',
'108,107,109,110,,,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,',
',,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76',
'67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29',
'108,107,109,110,,,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,',
',,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,120,,,,,119',
'67,,86,100,101,,,43,44,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,9,12,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,42',
',,35,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,,,400,67,,86,100,101,,,43,44,74,75,76,,62,,,,68,69,,,,72',
',70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,',
'112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,',
',,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72',
',70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,',
'112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,',
',,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72',
',70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,',
'112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,',
',,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72',
',70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,',
'112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,',
',,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,74,75,76,11,62,',
',,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,',
'21,,,,,,10,50,,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
'46,47,45,,,,,,,,,,,,,,,,,,,,42,,,35,,,63,64,,,65,,37,,,,49,,,,,,,,,22',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
'46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,416,,,,49,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,416,,,,49,,,',
',,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,',
'289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,494,,72,,70,71,73,32,33,77,78,,,,,,79',
'30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105',
'294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,291,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,',
'85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77',
'78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61',
'104,103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,291,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89',
'91,90,92,,,,,85,95,226,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,',
'70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,',
'112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,',
',,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72',
',70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,',
',112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46,47,45,,,,',
',,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49,,,295,,,,,,236,',
',,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100',
'101,,,43,44,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,',
',79,30,29,108,107,109,110,,,21,,,,,,10,50,,12,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,42,,,35,,,63',
'64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,',
',,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,',
',,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,',
',,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78',
',,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61',
'104,103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91',
'90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71',
'73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112',
'111,113,102,61,104,103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,',
',,,,,,,,,,231,,,237,,,63,64,,,65,,676,,289,,49,,,295,,,,,,236,,,,,96',
'292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69',
'43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,',
'238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46',
'47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44',
'74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108',
'107,109,110,,,21,,,,,,10,50,,12,112,111,113,102,61,104,103,105,,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,42,,,35,,,63,64,,,65,,37',
',,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76',
'67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29',
'108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294',
'106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65',
',291,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,',
',,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78',
',,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61',
'104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237',
',,63,64,,,65,,784,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,',
',85,95,,,,,,,67,,86,100,101,,,43,44,74,75,76,11,62,,,,68,69,,,,72,,70',
'71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,,12',
'112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,',
',,,,,,,,,,,42,,,35,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72',
',70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,',
'50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,',
',,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44',
',72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,',
',,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
',,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43',
'44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238',
',,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47',
'45,,,,,,,,,,,,,,,,,,,,231,,,237,538,,63,64,,,65,,,,,,49,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49',
',,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67',
'62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291',
',289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,291,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,',
',,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,',
',,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63',
'64,,,65,,,,,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85',
'95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77',
'78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102',
'61,104,103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,676,,,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91',
'90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,74,75,76,11,62,,,,68,69',
',,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,',
'10,50,9,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47',
'45,,,,,,,,,,,,,,,,,,,,42,,,35,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,',
'96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69',
'43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,',
'238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46',
'47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110',
',,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46',
'47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68',
'69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
'46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110',
',,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46',
'47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68',
'69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
'46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110',
',,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46',
'47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68',
'69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238',
',,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46',
'47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49,,,295',
',,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,676,',
',,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86',
'100,101,,,43,44,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78',
',,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,42,,',
'35,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,,,400,67,,86,100,101,,,43,44,74,75,76,,62,,,,68,69,,,,72',
',70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,',
'112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,',
',,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72',
',70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,',
'50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,',
',,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44',
',72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,',
',,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46,47',
'45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,289,,49,,,295,,,,,,236',
',,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,676,,289',
',49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75',
'76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79',
'316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63',
'64,,,65,,,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,',
'85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320',
'77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,,,,67,,86,100,101,-259,,43,44,,,,-259,-259,-259,,,-259',
'-259,-259,719,-259,716,715,714,724,717,,,-259,-259,-259,,,,727,,,,,',
'-259,-259,,-259,-259,-259,-259,-259,,719,,716,715,714,724,717,722,,',
',,,,,727,732,731,735,734,,,,728,,719,,716,715,714,724,717,-259,,,,,722',
',-259,727,,,,273,-259,732,731,735,734,,,,728,,,,,,,,,722,902,,,,-259',
'-259,,,,,735,734,,,,728,226,,,-259,,,-259,,74,75,76,-259,62,,,,68,69',
'-259,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,',
'238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46',
'47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,',
'289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,,',
',67,,86,100,101,-691,,43,44,,,,-691,-691,-691,,,-691,-691,-691,,-691',
',,,,,,,-691,-691,-691,-691,-691,,,,,,,,-691,-691,,-691,-691,-691,-691',
'-691,,,,,,,,,,,,,,,,,,,,,,,-691,-691,-691,-691,-691,-691,-691,-691,-691',
'-691,-691,-691,-691,-691,,,-691,-691,-691,,,-691,,,-691,,,-691,-691',
',-691,,-691,,-691,,-691,-691,,-691,-691,-691,-691,-691,,-691,-691,-691',
',,,,,,,,,,,,,-691,,,-691,-691,-691,-691,,-691,,-691,,74,75,76,-691,62',
',,,68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
'46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,317,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,313,,,309,,,63,64,,,65,,,,,,,,,',
',,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109',
'110,,,238,,,,,,,317,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,,,323,,,,,,,,,,,,,,,,,,,,313,,,237,,,63,64,,,65,,,719,,716,715,714',
'724,717,,,,,,,,,727,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,325,,722',
'67,,86,100,101,74,75,76,,62,735,734,,68,69,728,,,72,,70,71,73,319,320',
'77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,317,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,1052',
',,237,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,,,,74,75,76,67,62,86,100,101,68,69,,,,72,,70,71,73,319,320,77,78',
',,,,,79,316,322,108,107,109,110,,,238,,,,,,,317,,,112,111,113,102,61',
'104,103,105,,106,114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,313,,,309,',
',63,64,,,65,,308,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,,,,72,,70,71,73,319,320,77,78,,,',
',,79,316,322,108,107,109,110,,,238,,,,,,,317,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,313,,,309,,,63',
'64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316',
'322,108,107,109,110,,,238,,,,,,,317,,,112,111,113,366,61,104,103,367',
',106,114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,368,,,237,,,63,64,,,65',
',,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67',
'62,86,100,101,68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,317,,,112,111,113,366,61,104,103,367,,106,114',
'115,,98,99,,,323,,,,,,,,,,,,,,,,,373,,,368,,,237,,,63,64,,,65,,,,,,',
',,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107',
'109,110,,,238,,,,,,,317,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,,,323,,,,,,,,,,,,,,,,,,,,313,,,309,,,63,64,,,65,,,,,,,,,,,,,',
',,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110',
',,238,,,,,,,317,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
',,323,,,,,,,,,,,,,,,,,,,,361,,,35,,,63,64,,,65,,37,,,,,,,,,,,,,,,,,',
'96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69',
',,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238',
',,,,,,317,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,,,323',
',,,,,,,,,,,,,,,,,,,1046,,,237,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,,,,72',
',70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,',
'317,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,,,323,,,,,',
',,,,,,,,,,,,,,313,,,309,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,,,,72,,70',
'71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,317',
',,112,111,113,102,61,104,103,105,,106,114,115,,98,99,,,323,,,,,,,,,',
',,,,,,,,,,313,,,309,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89',
'91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,,,,72,,70,71,73',
'319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,317,,,112',
'111,113,102,61,104,103,105,,106,114,115,,98,99,,,323,,,,,,,,,,,,,,,',
',,,,1046,,,237,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90',
'92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,,,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,317,,,112,111',
'113,102,61,104,103,105,,106,114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,',
'313,,,237,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,521,,,67,,86,100,101,179,190,180,203,176,196,186,185,206',
'207,201,184,183,178,204,208,209,188,177,191,195,197,189,182,,,,198,205',
'200,199,192,202,187,175,194,193,,,,,,174,181,172,173,169,170,171,132',
'134,,,133,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165',
'166,152,153,,,,,,,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147',
'139,161,140,,,168,96,,,,,,,,,,,,,,95,179,190,180,203,176,196,186,185',
'206,207,201,184,183,178,204,208,209,188,177,191,195,197,189,182,,,,198',
'205,200,199,192,202,187,175,194,193,,,,,,174,181,172,173,169,170,171',
'132,134,,,133,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146',
',,,165,166,152,153,,,,,,,,,,,,,,157,156,,141,162,159,158,167,154,155',
'149,147,139,161,140,,,168,96,,,,,,,,,,,,,,95,179,190,180,203,176,196',
'186,185,206,207,201,184,183,178,204,208,209,188,177,191,195,197,189',
'182,,,,198,205,200,199,192,202,187,175,194,193,,,,,,174,181,172,173',
'169,170,171,132,134,131,,133,,,,,,,,163,164,,160,142,143,144,151,148',
'150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157,156,,141,162,159,158',
'167,154,155,149,147,139,161,140,,,168,96,,,,,,,,,,,,,,95,179,190,180',
'203,176,196,186,185,206,207,201,184,183,178,204,208,209,188,177,191',
'195,197,189,182,,,,198,205,200,199,192,202,187,175,194,193,,,,,,174',
'181,172,173,169,170,171,132,134,,,133,,,,,,,,163,164,,160,142,143,144',
'151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157,156,,141,162',
'159,158,167,154,155,149,147,139,161,140,,,168,96,,,,,,,,,,,,,,95,179',
'190,180,203,176,196,186,185,206,207,201,184,183,178,204,208,209,188',
'177,191,195,197,189,182,,,,198,205,200,199,192,202,187,175,194,193,',
',,,,174,181,172,173,169,170,171,132,134,,,133,,,,,,,,163,164,,160,142',
'143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157,156',
',141,162,159,158,167,154,155,149,147,139,161,140,,,168,108,107,109,110',
',,719,,716,715,714,724,717,,,,112,111,113,657,,727,,660,928,,,,,98,99',
',,323,727,,,,,,,,,722,,,,,,,,,,659,735,734,641,,,728,639,,,640,,922',
',,,,,,728,,,,,,,658,,,,96,929,87,88,,89,91,90,92,,,,,85,95,108,107,109',
'110,,,656,,86,100,101,,,645,646,,112,111,113,657,,,719,660,716,715,714',
'724,717,98,99,,,323,,,,727,,,,,,,,,,,,,,,,659,,,641,,,722,639,,,640',
',,,,732,731,735,734,,,,728,,,,658,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,108,107,109,110,,,656,,86,100,101,,,645,646,,112,111,113,657,,,719',
'660,716,715,714,724,717,98,99,,,323,,,,727,,,,,,,,,,,,,,,,659,,,641',
',,722,639,,,640,,,,,732,731,735,734,,,,728,,,,658,,,,96,84,87,88,,89',
'91,90,92,,,,,85,95,108,107,109,110,,,656,,86,100,101,,,645,646,,112',
'111,113,657,,,719,660,716,715,714,724,717,98,99,,,323,,,,727,,,,,,,',
',,,,,,,,659,,,641,,,722,639,,,640,,,,,,,735,734,,,,728,,,,658,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,,,656,,86,100,101,,',
'645,646,,112,111,113,657,,,,660,928,,,,,98,99,,,323,727,,,,,,,,,,,,',
',,,,,,659,,,641,,,,639,,,640,,922,,,,,,,728,,,,,,,658,,,,96,929,87,88',
',89,91,90,92,,,,,85,95,108,107,109,110,,,656,,86,100,101,,,645,646,',
'112,111,113,657,,,719,660,716,715,714,724,717,98,99,,,323,,,,727,,,',
',,,,,,,,,,,,659,,,641,,,722,639,,,640,,1015,,,732,731,735,734,,,,728',
',,,658,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,,,656,',
'86,100,101,,,645,646,,112,111,113,657,,,719,660,716,715,714,724,717',
'98,99,,,323,,,,727,,,,,,,,,,,,,,,,659,,,641,,,722,639,,,640,,922,,,',
',735,734,,,,728,,,,658,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107',
'109,110,,,656,,86,100,101,,,645,646,,112,111,113,657,,,719,660,716,715',
'714,724,717,98,99,,,323,,,,727,,,,,,,,,,,,,,,,659,,,641,,,722,639,,',
'640,,,,,,,735,734,,,,728,,,,658,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,,,,656,,86,100,101,,,645,646,179,190,180,203,176,196,186,185,206',
'207,201,184,183,178,204,208,209,188,177,191,195,197,189,182,,,,198,205',
'200,384,383,385,382,175,194,193,,,,,,174,181,172,173,379,380,381,377',
'134,104,103,378,,106,,,,,,163,164,,160,142,143,144,151,148,150,,,145',
'146,,,,165,166,152,153,,,,,,389,,,,,,,,157,156,,141,162,159,158,167',
'154,155,149,147,139,161,140,,,168,108,107,109,110,,,719,,716,715,714',
'724,717,,,,112,111,113,657,,727,,660,928,,,,,98,99,,,323,727,,,,,,,',
',722,,,,,,,,,,659,735,734,641,,,728,639,,,640,,922,,,,,,,728,,,,,,,658',
',,,96,929,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,,,656,,86,100',
'101,,,645,646,,112,111,113,657,,,719,660,716,715,714,724,717,98,99,',
',323,,,,727,,,,,,,,,,,,,,,,659,,,641,,,722,639,,,640,,,,,,,735,734,',
',,728,,,,658,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,',
',656,,86,100,101,,,645,646,,112,111,113,657,,,719,660,716,715,714,724',
'717,98,99,,,323,,,,727,,,,,,,,,,,,,,,,659,,,641,,,722,639,,,640,,,,',
'732,731,735,734,,,,728,,,,658,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
'108,107,109,110,,,656,,86,100,101,,,645,646,,112,111,113,657,,,719,660',
'716,715,714,724,717,98,99,,,323,,,,727,,,,,,,,,,,,,,,,659,,,641,,,722',
'639,,,640,,,,,732,731,735,734,,,,728,,,,658,,,,96,84,87,88,,89,91,90',
'92,,,,,85,95,108,107,109,110,,,656,,86,100,101,,,645,646,,112,111,113',
'657,,,719,660,716,715,714,724,717,98,99,,,323,,,,727,,,,,,,,,,,,,,,',
'659,,,641,,,722,639,,,640,,922,,,,,735,734,,,,728,,,,658,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,108,107,109,110,,,656,,86,100,101,,,645,646',
',112,111,113,657,,,719,660,716,715,714,724,717,98,99,,,323,,,,727,,',
',,,,,,,,,,,,,659,,,641,,,722,639,,,640,,,,,,,735,734,,,,728,,,,658,',
',,96,84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,,,656,,86,100,101',
',,645,646,,112,111,113,657,,,,660,,,,,,98,99,,,323,,,,,,,,108,107,109',
'110,,,,,,,,,659,,,641,112,111,113,639,,,640,,,,,,,98,99,,,323,,,,,658',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,656,,86,100,101,,,645,646',
',,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,,,656',
',86,100,101,,,,,,112,111,113,628,442,,,629,,,,,,98,99,163,164,323,160',
'142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273,,,,,,',
',157,156,,141,162,159,158,167,154,155,149,147,139,161,140,,,168,96,84',
'87,88,,89,91,90,92,,,,,85,95,630,449,,,631,,656,,86,100,101,,163,164',
',160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273,',
',,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,686,442',
'168,,687,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165',
'166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154,155,149',
'147,139,161,140,689,449,168,,690,,,,,,,,163,164,,160,142,143,144,151',
'148,150,,,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162',
'159,158,167,154,155,149,147,139,161,140,628,442,168,,629,,,,,,,,163',
'164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273',
',,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,630',
'449,168,,631,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,',
',,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154,155',
'149,147,139,161,140,751,442,168,,752,,,,,,,,163,164,,160,142,143,144',
'151,148,150,,,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141',
'162,159,158,167,154,155,149,147,139,161,140,753,449,168,,754,,,,,,,',
'163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,',
',,,273,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140',
'756,449,168,,757,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146',
',,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154',
'155,149,147,139,161,140,490,442,168,,491,,,,,,,,163,164,,160,142,143',
'144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156',
',141,162,159,158,167,154,155,149,147,139,161,140,786,442,168,,787,,',
',,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153',
',,,,,273,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161',
'140,789,449,168,,788,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145',
'146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167',
'154,155,149,147,139,161,140,1145,449,168,,1144,,,,,,,,163,164,,160,142',
'143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157',
'156,,141,162,159,158,167,154,155,149,147,139,161,140,1148,442,168,,1149',
',,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152',
'153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139',
'161,140,1150,449,168,,1151,,,,,,,,163,164,,160,142,143,144,151,148,150',
',,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158',
'167,154,155,149,147,139,161,140,490,442,168,,491,,,,,,,,163,164,,160',
'142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157',
'156,,141,162,159,158,167,154,155,149,147,139,161,140,445,449,168,,444',
',,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152',
'153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139',
'161,140,438,442,168,,439,,,,,,,,163,164,,160,142,143,144,151,148,150',
',,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158',
'167,154,155,149,147,139,161,140,,719,168,716,715,714,724,717,,719,,716',
'715,714,724,717,727,,,,,,,,727,,719,,716,715,714,724,717,,,,,,722,,',
'727,,,,,722,732,731,735,734,,,,728,732,731,735,734,,,,728,722,704,719',
',716,715,714,724,717,732,731,735,734,,,,728,727,,,,,,,,,,,,,,,,,,,,',
',722,,,,,,,,,732,731,735,734,,,,728' ]
        racc_action_table = arr = ::Array.new(27177, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'445,665,1170,809,232,751,19,445,445,445,454,454,66,445,445,916,445,938',
'996,358,753,994,26,359,445,445,396,794,397,26,423,362,892,670,857,640',
'445,445,1150,445,445,445,445,445,1053,1050,1049,350,351,566,752,754',
'640,19,21,659,1000,669,1000,659,938,916,809,232,996,19,445,445,445,445',
'445,445,445,445,445,445,445,445,445,445,696,696,445,445,445,753,445',
'26,665,423,445,965,396,445,397,21,576,576,445,66,445,664,445,445,454',
'445,445,445,445,445,102,445,445,445,751,1150,754,102,102,102,1170,1151',
'102,102,102,1170,102,445,358,753,445,445,359,445,102,445,102,102,102',
'994,362,892,445,857,994,445,102,102,1148,102,102,102,102,102,1149,749',
'1150,992,566,752,754,1150,1053,1050,1049,350,351,1053,1050,1049,350',
'351,1015,729,696,557,102,102,102,102,102,102,102,102,102,102,102,102',
'102,102,576,729,102,102,102,576,102,102,1151,922,102,628,355,102,102',
'662,102,355,102,965,102,812,102,102,965,102,102,102,102,102,1113,102',
'105,102,661,580,580,439,629,105,105,105,323,323,105,105,105,102,105',
'1151,102,102,102,102,1151,102,105,102,105,105,105,812,102,810,1015,102',
'681,686,105,105,628,105,105,105,105,105,1148,813,681,658,687,1148,1149',
'749,439,992,749,1149,749,557,992,922,1102,28,557,1102,439,629,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,787,813,105,105,105',
'1161,105,105,323,323,105,635,639,105,105,1161,105,580,105,591,105,686',
'105,105,318,105,105,105,105,105,788,105,1019,105,687,633,1113,788,788',
'788,930,1113,1019,788,788,28,788,105,639,846,105,105,105,105,788,105',
'387,105,930,787,593,686,105,387,686,105,788,788,28,788,788,788,788,788',
'687,702,686,687,702,689,1019,816,560,591,591,816,1028,385,318,687,560',
'368,1019,591,385,368,788,788,788,788,788,788,788,788,788,788,788,788',
'788,788,367,318,788,788,788,846,788,45,45,632,788,387,384,788,593,593',
'398,460,788,384,788,624,788,788,593,788,788,788,788,788,444,788,438',
'788,689,689,41,444,444,444,1028,1028,385,444,444,846,444,788,846,821',
'788,788,367,788,444,788,229,1028,619,367,846,1021,788,40,367,788,444',
'444,367,444,444,444,444,444,614,689,460,384,689,438,398,398,398,41,638',
'45,45,367,605,638,689,438,786,638,598,41,444,444,444,444,444,444,444',
'444,444,444,444,444,444,444,40,327,444,444,444,229,444,367,833,907,444',
'509,40,444,391,1021,1021,1021,444,392,444,836,444,444,395,444,444,444',
'444,444,631,444,1021,444,230,613,596,631,631,631,588,786,631,631,631',
'1051,631,444,327,845,444,444,1051,444,631,444,631,631,631,5,327,1051',
'444,366,5,444,631,631,907,631,631,631,631,631,578,509,509,509,391,391',
'391,393,613,392,392,392,298,394,395,395,395,298,509,230,613,849,631',
'631,631,631,631,631,631,631,631,631,631,631,631,631,1051,561,631,631',
'631,366,631,631,345,852,631,345,366,631,631,853,631,366,631,903,631',
'366,631,631,903,631,631,631,631,631,559,631,1045,631,858,393,393,393',
'569,1045,366,394,394,394,558,569,554,631,1045,383,631,631,631,631,569',
'631,383,631,131,630,1122,1122,631,131,131,631,630,630,630,542,366,630',
'630,630,18,630,48,48,16,16,541,18,382,630,630,630,630,630,896,382,18',
'342,756,896,342,630,630,1045,630,630,630,630,630,569,757,540,341,539',
'51,341,381,757,48,48,383,51,757,381,737,737,757,862,862,874,51,630,630',
'630,630,630,630,630,630,630,630,630,630,630,630,18,875,630,630,630,756',
'630,630,382,3,630,877,756,630,630,883,630,756,630,530,630,756,630,630',
'886,630,630,630,630,630,757,630,630,630,51,527,381,522,228,380,756,379',
'995,995,520,228,380,630,379,378,630,630,630,630,228,630,378,630,517',
'789,349,349,630,642,642,630,789,789,789,859,756,893,789,789,690,789',
'895,516,899,859,900,690,901,789,789,905,690,906,500,496,690,823,823',
'823,823,789,789,495,789,789,789,789,789,228,380,917,379,823,823,823',
'918,472,859,859,378,921,471,859,923,470,823,823,469,931,823,789,789',
'789,789,789,789,789,789,789,789,789,789,789,789,690,932,789,789,789',
'934,789,935,1106,377,789,456,446,789,310,1106,377,437,789,945,789,310',
'789,789,1106,789,789,789,789,789,310,789,789,789,946,823,823,823,823',
'947,823,823,823,823,819,949,950,789,823,823,789,789,951,789,819,789',
'823,953,823,823,823,954,789,955,956,789,577,577,577,577,577,577,436',
'1106,377,577,577,434,424,310,577,420,577,577,577,577,577,577,577,23',
'971,972,819,974,577,577,577,577,577,577,577,584,584,577,819,584,584',
'584,977,577,577,577,577,577,577,577,577,577,577,577,577,978,577,577',
'577,980,577,577,577,577,577,23,23,23,23,23,23,23,23,23,23,23,311,23',
'23,981,983,23,23,311,577,986,417,577,1031,415,577,577,311,414,577,412',
'577,23,1031,23,577,23,23,406,23,23,23,23,23,577,23,82,1004,1009,577',
'577,577,577,312,577,577,577,577,82,1013,312,1014,577,577,372,23,1031',
'1031,82,312,577,1031,577,577,577,1017,311,577,577,337,337,337,337,337',
'337,363,1020,361,337,337,357,356,346,337,1042,337,337,337,337,337,337',
'337,338,338,338,338,338,337,337,337,337,337,337,337,1,344,337,1046,312',
'343,339,427,337,337,337,337,337,337,337,337,337,337,337,337,1052,337',
'337,337,333,337,337,337,337,337,427,427,427,427,427,427,427,427,427',
'427,427,314,427,427,331,324,427,427,314,337,322,317,337,316,1070,337',
'337,314,1071,337,313,337,427,307,427,337,427,427,306,427,427,427,427',
'427,337,427,305,303,1083,337,337,337,337,526,337,337,337,337,302,1086',
'526,1092,337,337,1095,427,1096,427,1097,526,337,1098,337,337,337,1100',
'314,337,337,851,851,851,851,851,851,290,1109,287,851,851,286,272,238',
'851,1114,851,851,851,851,851,851,851,301,301,301,301,301,851,851,851',
'851,851,851,851,1115,1116,851,1117,526,1118,1119,433,851,851,851,851',
'851,851,851,851,851,851,851,851,234,851,851,851,233,851,851,851,851',
'851,433,433,433,433,433,433,433,433,433,433,433,422,433,433,231,1127',
'433,433,422,851,210,1129,851,1130,50,851,851,422,42,851,39,851,433,24',
'433,851,433,433,17,433,433,433,433,433,851,433,1181,1144,1145,851,851',
'851,851,370,851,851,851,851,1147,15,370,14,851,851,12,433,9,1159,1163',
'370,851,1165,851,851,851,1166,422,851,851,1055,1055,1055,1055,1055,1055',
'1167,1168,1171,1055,1055,745,739,746,1055,750,1055,1055,1055,1055,1055',
'1055,1055,8,8,8,8,8,1055,1055,1055,1055,1055,1055,1055,736,733,1055',
'721,370,712,711,710,1055,1055,1055,1055,1055,1055,1055,1055,1055,1055',
'1055,1055,759,1055,1055,1055,708,1055,1055,1055,1055,1055,537,537,537',
'537,537,537,537,537,537,537,537,328,537,537,707,763,537,537,328,1055',
'706,697,1055,695,692,1055,1055,328,783,1055,691,1055,537,785,537,1055',
'537,537,688,537,537,537,537,537,1055,537,685,683,675,1055,1055,1055',
'1055,360,1055,1055,1055,1055,673,671,360,,1055,1055,,537,,,,360,1055',
',1055,1055,1055,,328,1055,1055,1056,1056,1056,1056,1056,1056,,,,1056',
'1056,,,,1056,,1056,1056,1056,1056,1056,1056,1056,514,514,514,514,514',
'1056,1056,1056,1056,1056,1056,1056,,,1056,,360,,,,1056,1056,1056,1056',
'1056,1056,1056,1056,1056,1056,1056,1056,,1056,1056,1056,,1056,1056,1056',
'1056,1056,942,942,942,942,942,942,942,942,942,942,942,,942,942,,,942',
'942,,1056,,,1056,,,1056,1056,,,1056,,1056,942,,942,1056,942,942,,942',
'942,942,942,942,1056,942,,,,1056,1056,1056,1056,,1056,1056,1056,1056',
',,,,1056,1056,,942,,,,,1056,,1056,1056,1056,,,1056,1056,129,129,129',
'129,129,129,,,,129,129,,,,129,,129,129,129,129,129,129,129,,,,,,129',
'129,129,129,129,129,129,,1043,129,1043,1043,1043,,1043,129,129,129,129',
'129,129,129,129,129,129,129,129,,129,129,129,,129,129,129,129,129,791',
'791,791,791,791,791,791,791,791,791,791,,791,791,,,791,791,,129,,,129',
',,129,129,,,129,,129,791,,791,129,791,791,,791,791,791,791,791,129,791',
',,,129,129,129,129,,129,129,129,129,,,,,129,129,,791,,,,,129,,129,129',
'129,,,129,129,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2',
'2,2,,876,2,876,876,876,,876,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,2,2',
'2,284,284,284,284,284,284,284,284,284,284,284,,284,284,,,284,284,,2',
',,2,,,2,2,,,2,,2,284,,284,2,284,284,,284,284,284,284,284,2,284,,,,2',
'2,2,2,,2,2,2,2,,,,,2,2,,284,,,,,2,,2,2,2,,,2,2,212,212,212,212,212,212',
',,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212',
'212,212,212,,1143,212,1143,1143,1143,,1143,212,212,212,212,212,212,212',
'212,212,212,212,212,,212,212,212,,212,212,212,212,212,486,486,486,486',
'486,486,486,486,486,486,486,,486,486,,,486,486,,212,,,212,,,212,212',
',,212,,212,486,,486,212,486,486,,486,486,486,486,486,212,486,,,,212',
'212,212,212,,212,212,212,212,,,,,212,212,486,486,,,,,212,,212,212,212',
',,212,212,840,840,840,840,840,840,,,,840,840,,,,840,,840,840,840,840',
'840,840,840,,,,,,840,840,840,840,840,840,840,,987,840,987,987,987,,987',
'840,840,840,840,840,840,840,840,840,840,840,840,,840,840,840,,840,840',
'840,840,840,872,,872,872,872,,872,,987,,1120,,1120,1120,1120,,1120,987',
',840,,,840,,,840,840,,467,840,722,840,722,722,722,840,722,872,,,,,,',
'840,,872,1120,,840,840,840,840,,840,840,840,840,,,467,,840,840,467,467',
',722,,,840,,840,840,840,,722,840,840,354,354,354,354,354,354,,,,354',
'354,,,,354,,354,354,354,354,354,354,354,,,,,,354,354,354,354,354,354',
'354,483,1121,354,1121,1121,1121,,1121,354,354,354,354,354,354,354,354',
'354,354,354,354,,354,354,354,,354,354,354,354,354,536,,483,,,,483,483',
'1121,483,483,,,,,,536,536,,354,,,354,,,354,354,,482,354,,354,536,,536',
'354,536,536,,536,536,,,536,354,536,,,,354,354,354,354,,354,354,354,354',
',,482,,354,354,482,482,,482,482,,354,,354,354,354,,,354,354,760,760',
'760,760,760,760,,,,760,760,,,,760,,760,760,760,760,760,760,760,,,,,',
'760,760,760,760,760,760,760,,,760,,,468,,,760,760,760,760,760,760,760',
'760,760,760,760,760,,760,760,760,,760,760,760,760,760,477,477,477,477',
'477,477,477,468,,477,477,468,468,,,,477,477,,760,,,760,,,760,760,,,760',
',760,477,,477,760,477,477,,477,477,477,477,477,760,477,,,,760,760,760',
'760,,760,760,760,760,,,,,760,760,,988,,988,988,988,760,988,760,760,760',
',,760,760,764,764,764,764,764,764,,,,764,764,,,,764,,764,764,764,764',
'764,764,764,988,,,,,764,764,764,764,764,764,764,,,764,,,,,,764,764,764',
'764,764,764,764,764,764,764,764,764,,764,764,764,,764,764,764,764,764',
'476,476,476,476,476,476,476,,,476,476,,,,,,476,476,,764,,,764,,,764',
'764,,,764,,764,476,,476,764,476,476,,476,476,476,476,476,764,476,,,',
'764,764,764,764,,764,764,764,764,,,,,764,764,,,,,,,764,,764,764,764',
',,764,764,1072,1072,1072,1072,1072,1072,,,,1072,1072,,,,1072,,1072,1072',
'1072,1072,1072,1072,1072,,,,,,1072,1072,1072,1072,1072,1072,1072,,,1072',
',,,,,1072,1072,1072,1072,1072,1072,1072,1072,1072,1072,1072,1072,,1072',
'1072,1072,,1072,1072,1072,1072,1072,329,329,329,329,329,329,329,329',
'329,329,329,,329,329,,,329,329,,1072,,,1072,,,1072,1072,,,1072,,1072',
'329,,329,1072,329,329,,329,329,329,329,329,1072,329,,,,1072,1072,1072',
'1072,,1072,1072,1072,1072,,,,,1072,1072,,,,,,,1072,,1072,1072,1072,',
',1072,1072,943,943,943,943,943,943,,,,943,943,,,,943,,943,943,943,943',
'943,943,943,,,,,,943,943,943,943,943,943,943,,,943,,,,,,943,943,943',
'943,943,943,943,943,943,943,943,943,,943,943,943,,943,943,943,943,943',
'330,330,330,330,330,330,330,330,330,330,330,,330,330,,,330,330,,943',
',,943,,,943,943,,,943,,943,330,,330,943,330,330,,330,330,330,330,330',
'943,330,,,,943,943,943,943,,943,943,943,943,,,,,943,943,,,,,,,943,,943',
'943,943,,,943,943,755,755,755,755,755,755,,,,755,755,,,,755,,755,755',
'755,755,755,755,755,,,,,,755,755,755,755,755,755,755,,,755,,,,,,755',
'755,755,755,755,755,755,755,755,755,755,755,,755,755,755,,755,755,755',
'755,755,465,465,465,465,465,465,465,465,465,465,465,,465,465,,,465,465',
',755,,,755,,,755,755,,,755,,755,465,,465,755,465,465,,465,465,465,465',
'465,755,465,,,,755,755,755,755,,755,755,755,755,,,,,755,755,,,,,,,755',
',755,755,755,,,755,755,353,353,353,353,353,353,,,,353,353,,,,353,,353',
'353,353,353,353,353,353,,,,,,353,353,353,353,353,353,353,,,353,,,,,',
'353,353,353,353,353,353,353,353,353,353,353,353,,353,353,353,,353,353',
'353,353,353,484,484,484,484,484,484,484,,,484,484,,,,,,484,484,,353',
',,353,,,353,353,,,353,,353,484,,484,353,484,484,,484,484,484,484,484',
'353,484,,,,353,353,353,353,,353,353,353,353,,,,,353,353,,,,,,,353,,353',
'353,353,,,353,353,1048,1048,1048,1048,1048,1048,,,,1048,1048,,,,1048',
',1048,1048,1048,1048,1048,1048,1048,,,,,,1048,1048,1048,1048,1048,1048',
'1048,,,1048,,,,,,1048,1048,1048,1048,1048,1048,1048,1048,1048,1048,1048',
'1048,,1048,1048,1048,,1048,1048,1048,1048,1048,466,466,466,466,466,466',
'466,466,466,466,466,,466,466,,,466,466,,1048,,,1048,,,1048,1048,,,1048',
',1048,466,,466,1048,466,466,,466,466,466,466,466,1048,466,,,,1048,1048',
'1048,1048,,1048,1048,1048,1048,,,,,1048,1048,,,,,,,1048,,1048,1048,1048',
',,1048,1048,774,774,774,774,774,774,,,,774,774,,,,774,,774,774,774,774',
'774,774,774,,,,,,774,774,774,774,774,774,774,,,774,,,,,,774,774,774',
'774,774,774,774,774,774,774,774,774,,774,774,774,,774,774,774,774,774',
'481,481,481,481,481,481,481,,,481,481,,,,,,481,481,,774,,,774,,,774',
'774,,,774,,774,481,,481,774,481,481,,481,481,481,481,481,774,481,,,',
'774,774,774,774,,774,774,774,774,,,,,774,774,,,,,,,774,,774,774,774',
',,774,774,962,962,962,962,962,962,,,,962,962,,,,962,,962,962,962,962',
'962,962,962,,,,,,962,962,962,962,962,962,962,,,962,,,,,,962,962,962',
'962,962,962,962,962,962,962,962,962,,962,962,962,,962,962,962,962,962',
'480,480,480,480,480,480,480,,,480,480,,,,,,480,480,,962,,,962,,,962',
'962,,,962,,962,480,,480,962,480,480,,480,480,480,480,480,962,480,,,',
'962,962,962,962,,962,962,962,962,,,,,962,962,,,,,,,962,,962,962,962',
',,962,962,1123,1123,1123,1123,1123,1123,,,,1123,1123,,,,1123,,1123,1123',
'1123,1123,1123,1123,1123,,,,,,1123,1123,1123,1123,1123,1123,1123,,,1123',
',,,,,1123,1123,1123,1123,1123,1123,1123,1123,1123,1123,1123,1123,,1123',
'1123,1123,,1123,1123,1123,1123,1123,485,485,485,485,485,485,485,485',
',485,485,,,,,,485,485,,1123,,,1123,,,1123,1123,,,1123,,1123,485,,485',
'1123,485,485,,485,485,485,485,485,1123,485,,,,1123,1123,1123,1123,,1123',
'1123,1123,1123,,,,,1123,1123,,,,,,,1123,,1123,1123,1123,,,1123,1123',
'897,897,897,897,897,897,,,,897,897,,,,897,,897,897,897,897,897,897,897',
',,,,,897,897,897,897,897,897,897,,,897,,,,,,897,897,897,897,897,897',
'897,897,897,897,897,897,,897,897,897,,897,897,897,897,897,487,,,,,,',
',,,,,,,,,487,487,,897,,,897,,,897,897,,,897,,897,487,,487,897,487,487',
',487,487,,,487,897,487,,,,897,897,897,897,,897,897,897,897,,,,,897,897',
',,,,,,897,,897,897,897,,,897,897,237,237,237,237,237,237,,,,237,237',
',,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237',
',,237,,,,,,237,237,237,237,237,237,237,237,237,237,237,237,,237,237',
'237,,237,237,237,237,237,479,479,479,479,479,479,479,,,479,479,,,,,',
'479,479,,237,,,237,,,237,237,,,237,,237,479,,479,237,479,479,,479,479',
'479,479,479,237,479,,,,237,237,237,237,,237,237,237,237,,,,,237,237',
',,,,,,237,,237,237,237,,,237,237,891,891,891,891,891,891,,,,891,891',
',,,891,,891,891,891,891,891,891,891,,,,,,891,891,891,891,891,891,891',
',,891,,,,,,891,891,891,891,891,891,891,891,891,891,891,891,,891,891',
'891,,891,891,891,891,891,478,478,478,478,478,478,478,,,478,478,,,,,',
'478,478,,891,,,891,,,891,891,,,891,,891,478,,478,891,478,478,,478,478',
'478,478,478,891,478,,,,891,891,891,891,,891,891,891,891,,,,,891,891',
',,,,,,891,,891,891,891,,,891,891,553,553,553,553,553,553,,,,553,553',
',,,553,,553,553,553,553,553,553,553,,,,,,553,553,553,553,553,553,553',
',,553,,,,,,553,553,553,553,553,553,553,553,553,553,553,553,,553,553',
'553,,553,553,553,553,553,473,,,,,,,,,,,,,,,,473,473,,553,,,553,,,553',
'553,,,553,,553,473,,473,553,473,473,,473,473,,,,553,,,,,553,553,553',
'553,,553,553,553,553,,,,,553,553,,,,,,,553,,553,553,553,,,553,553,556',
'556,556,556,556,556,,,,556,556,,,,556,,556,556,556,556,556,556,556,',
',,,,556,556,556,556,556,556,556,,,556,,,,,,556,556,556,556,556,556,556',
'556,556,556,556,556,,556,556,556,,556,556,556,556,556,475,,,,,,,,,,',
',,,,,475,475,,556,,,556,,,556,556,,,556,,556,475,,,556,475,475,,475',
'475,,,,556,,,,,556,556,556,556,,556,556,556,556,,,,,556,556,,,,,,,556',
',556,556,556,,,556,556,309,309,309,309,309,309,,,,309,309,,,,309,,309',
'309,309,309,309,309,309,,,,,,309,309,309,309,309,309,309,,,309,,,,,',
'309,309,309,309,309,309,309,309,309,309,309,309,,309,309,309,,309,309',
'309,309,309,474,,,,,,,,,,,,,,,,474,474,,309,,,309,,,309,309,,,309,,309',
'474,,474,309,474,474,,474,474,,,,309,,,,,309,309,309,309,,309,309,309',
'309,,,,,309,309,,,,,,,309,,309,309,309,,,309,309,304,304,304,304,304',
'304,,,,304,304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304,304',
'304,304,304,304,,,304,,,,,,304,304,304,304,304,304,304,304,304,304,304',
'304,,304,304,304,,304,304,304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304,',
',304,304,,,304,,304,,,,304,,,,,,,,,304,,,,,304,304,304,304,,304,304',
'304,304,,,,,304,304,,,,,,,304,,304,304,304,,,304,304,1081,1081,1081',
'1081,1081,1081,,,,1081,1081,,,,1081,,1081,1081,1081,1081,1081,1081,1081',
',,,,,1081,1081,1081,1081,1081,1081,1081,,,1081,,,,,,1081,1081,1081,1081',
'1081,1081,1081,1081,1081,1081,1081,1081,,1081,1081,1081,,1081,1081,1081',
'1081,1081,,,,,,,,,,,,,,,,,,,,1081,,,1081,,,1081,1081,,,1081,,1081,,',
',1081,,,,,,,,,1081,,,,,1081,1081,1081,1081,,1081,1081,1081,1081,,,,',
'1081,1081,,,,,,,1081,,1081,1081,1081,,,1081,1081,35,35,35,35,35,35,',
',,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,',
',,,,35,35,35,35,35,35,35,35,35,35,35,35,,35,35,35,,35,35,35,35,35,,',
',,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,35,,,,35,,,,,,,,,35,,,,,35,35',
'35,35,,35,35,35,35,,,,,35,35,,,,217,217,217,35,217,35,35,35,217,217',
'35,35,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217',
'217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,',
'217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,',
',,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217,217,,,,,217,217,',
',,218,218,218,217,218,217,217,217,218,218,217,217,,218,,218,218,218',
'218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218',
'218,218,218,218,218,218,218,218,218,218,218,,218,218,218,218,218,,,',
',,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,218,,218,,218,,,218,,,,,',
'218,,,,,218,218,218,218,,218,218,218,218,,,,,218,218,,,,792,792,792',
'218,792,218,218,218,792,792,218,218,,792,,792,792,792,792,792,792,792',
',,,,,792,792,792,792,792,792,792,,,792,,,,,,,792,,,792,792,792,792,792',
'792,792,792,,792,792,792,,792,792,792,792,792,,,,,,,,,,,,,,,,,,,,792',
',,792,,,792,792,,,792,,,,,,792,,,,,,,,,792,,,,,792,792,792,792,,792',
'792,792,792,,,,,792,792,,,,805,805,805,792,805,792,792,792,805,805,792',
'792,,805,,805,805,805,805,805,805,805,,,,,,805,805,805,805,805,805,805',
',,805,,,,,,,805,,,805,805,805,805,805,805,805,805,,805,805,805,,805',
'805,805,805,805,,,,,,,,,,,,,,,,,,,,805,,,805,,,805,805,,,805,,,,,,805',
',,,,,,,,805,,,,,805,805,805,805,,805,805,805,805,,,,,805,805,,,,223',
'223,223,805,223,805,805,805,223,223,805,805,,223,,223,223,223,223,223',
'223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223',
'223,223,223,223,223,,223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,',
',,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,,223,,,,,223,223,223',
'223,,223,223,223,223,,,,,223,223,,,,224,224,224,223,224,223,223,223',
'224,224,223,223,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224',
'224,224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224',
'224,,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224',
',,,,,224,,,,,,,,,224,,,,,224,224,224,224,,224,224,224,224,,,,,224,224',
',,,225,225,225,224,225,224,224,224,225,225,224,224,,225,,225,225,225',
'225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225',
'225,225,225,225,225,225,225,,225,225,225,,225,225,225,225,225,,,,,,',
',,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,,225,,,,,225',
'225,225,225,,225,225,225,225,,,,,225,225,225,,,806,806,806,225,806,225',
'225,225,806,806,225,225,,806,,806,806,806,806,806,806,806,,,,,,806,806',
'806,806,806,806,806,,,806,,,,,,,806,,,806,806,806,806,806,806,806,806',
',806,806,806,,806,806,806,806,806,,,,,,,,,,,,,,,,,,,,806,,,806,,,806',
'806,,,806,,,,,,806,,,,,,,,,806,,,,,806,806,806,806,,806,806,806,806',
',,,,806,806,,,,807,807,807,806,807,806,806,806,807,807,806,806,,807',
',807,807,807,807,807,807,807,,,,,,807,807,807,807,807,807,807,,,807',
',,,,,,807,,,807,807,807,807,807,807,807,807,,807,807,807,,807,807,807',
'807,807,,,,,,,,,,,,,,,,,,,,807,,,807,,,807,807,,,807,,,,,,807,,,,,,',
',,807,,,,,807,807,807,807,,807,807,807,807,,,,,807,807,,,,808,808,808',
'807,808,807,807,807,808,808,807,807,,808,,808,808,808,808,808,808,808',
',,,,,808,808,808,808,808,808,808,,,808,,,,,,,808,,,808,808,808,808,808',
'808,808,808,,808,808,808,,808,808,808,808,808,,,,,,,,,,,,,,,,,,,,808',
',,808,,,808,808,,,808,,,,,,808,,,,,,,,,808,,,,,808,808,808,808,,808',
'808,808,808,,,,,808,808,,,,617,617,617,808,617,808,808,808,617,617,808',
'808,,617,,617,617,617,617,617,617,617,,,,,,617,617,617,617,617,617,617',
',,617,,,,,,,617,,,617,617,617,617,617,617,617,617,,617,617,617,,617',
'617,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617,,,,,,617',
',,,,,,,,617,,,,,617,617,617,617,,617,617,617,617,,,,,617,617,,,,,,,617',
',617,617,617,449,,617,617,,,,449,449,449,,,449,449,449,,449,,,,,,,,449',
'449,449,449,449,,,,,,,,449,449,,449,449,449,449,449,,,,,,,,,,,,,,,,',
',,,,,,449,449,449,449,449,449,449,449,449,449,449,449,449,449,,,449',
'449,449,,,449,,,449,,,449,449,,449,,449,,449,,449,449,,449,449,449,449',
'449,,449,449,449,,,,,,,,,,,,,,449,,,449,449,449,449,,449,440,449,,,',
',449,440,440,440,,,440,440,440,,440,,,,,,,,440,440,440,440,,,,,,,,,440',
'440,,440,440,440,440,440,,,,,,,,,,,,,,,,,,,,,,,440,440,440,440,440,440',
'440,440,440,440,440,440,440,440,,,440,440,440,,,440,,440,440,,,440,440',
',440,,440,,440,,440,440,,440,440,440,440,440,,440,440,440,,,,,,,,,,',
',,,440,,,440,440,,440,,440,725,725,725,,725,,440,,725,725,,,,725,,725',
'725,725,725,725,725,725,,,,,,725,725,725,725,725,725,725,,,725,,,,,',
',725,,,725,725,725,725,725,725,725,725,,725,725,725,,725,725,725,725',
'725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725,,,725,,,,,,725,,,,,,,,,725',
',,,,725,725,725,725,,725,725,725,725,,,,,725,725,,,,761,761,761,725',
'761,725,725,725,761,761,725,725,,761,,761,761,761,761,761,761,761,,',
',,,761,761,761,761,761,761,761,,,761,,,,,,,761,,,761,761,761,761,761',
'761,761,761,,761,761,761,,761,761,761,761,761,,,,,,,,,,,,,,,,,,,,761',
',,761,,,761,761,,,761,,,,,,761,,,,,,,,,761,,,,,761,761,761,761,,761',
'761,761,761,,,,,761,761,,,,22,22,22,761,22,761,761,761,22,22,761,761',
',22,,22,22,22,22,22,22,22,,,,,,22,22,22,22,22,22,22,,,22,,,,,,,22,,',
'22,22,22,22,22,22,22,22,,22,22,22,,22,22,22,22,22,,,,,,,,,,,,,,,,,,',
',22,,,22,,,22,22,,,22,,,,,,22,,,,,,,,,22,,,,,22,22,22,22,,22,22,22,22',
',,,,22,22,,,,698,698,698,22,698,22,22,22,698,698,22,22,,698,,698,698',
'698,698,698,698,698,,,,,,698,698,698,698,698,698,698,,,698,,,,,,,698',
',,698,698,698,698,698,698,698,698,,698,698,698,,698,698,698,698,698',
',,,,,,,,,,,,,,,,,,,698,,,698,,,698,698,,,698,,698,,,,698,,,,,,,,,698',
',,,,698,698,698,698,,698,698,698,698,,,,,698,698,,,,,,,698,,698,698',
'698,29,,698,698,,,,29,29,29,,,29,29,29,,29,,,,,,,,29,29,29,29,,,,,,',
',,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,,,,29,29,29,29,29,29,29,29',
'29,29,29,29,29,29,,,29,29,29,,,29,,29,29,,,29,29,,29,,29,,29,,29,29',
',29,29,29,29,29,30,29,29,29,,,,30,30,30,,,30,30,30,,30,29,,,29,29,,29',
'30,29,30,30,,,,,29,,,,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,,,,30',
'30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30',
',30,,30,,30,,30,30,,30,30,30,30,30,,30,,30,,,,,,,,,,,,,,30,,,30,30,',
'30,,30,31,31,31,,31,,30,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31',
'31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,',
'31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,',
',31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,32,32,32,31,32',
'31,31,31,32,32,31,31,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32',
'32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,32,32',
'32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,32,,,,,,32',
',,,,32,32,32,32,,32,32,32,32,,,,,32,32,,,,33,33,33,32,33,32,32,32,33',
'33,32,32,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,',
',,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33,33,33,,,,,,,',
',,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,33,,,,,,33,,,,,33,33',
'33,33,,33,33,33,33,,,,,33,33,,,,784,784,784,33,784,33,33,33,784,784',
'33,33,,784,,784,784,784,784,784,784,784,,,,,,784,784,784,784,784,784',
'784,,,784,,,,,,,784,,,784,784,784,784,784,784,784,784,,784,784,784,',
'784,784,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784,,,784,,,',
',,784,,,,,,,,,784,,,,,784,784,784,784,,784,784,784,784,,,,,784,784,',
',,43,43,43,784,43,784,784,784,43,43,784,784,,43,,43,43,43,43,43,43,43',
',,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43',
'43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43',
',,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,44,44,44,43,44',
'43,43,43,44,44,43,43,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44',
'44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,44,44,44',
',,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44',
'44,44,,44,44,44,44,,,,,44,44,,,,46,46,46,44,46,44,44,44,46,46,44,44',
',46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,',
'46,46,46,46,46,46,46,46,,46,46,46,,46,46,46,46,46,,,,,,,,,,,,,,,,,,',
',46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,,46,,,,,46,46,46,46,,46,46,46,46',
',,,,46,46,,,,47,47,47,46,47,46,46,46,47,47,46,46,,47,,47,47,47,47,47',
'47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47',
'47,,47,47,47,,47,47,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47',
',,,,,47,,,,,,,,,47,,,,,47,47,47,47,,47,47,47,47,,,,,47,47,,,,49,49,49',
'47,49,47,47,47,49,49,47,47,,49,,49,49,49,49,49,49,49,,,,,,49,49,49,49',
'49,49,49,,,49,,,,,,,49,,,49,49,49,49,49,49,49,49,,49,49,49,,49,49,49',
'49,49,,,,,,,,,,,,,,,,,,,,49,,,49,,,49,49,,,49,,,,,,49,,,,,,,,,49,,,',
',49,49,49,49,,49,49,49,49,,,,,49,49,,,,679,679,679,49,679,49,49,49,679',
'679,49,49,,679,,679,679,679,679,679,679,679,,,,,,679,679,679,679,679',
'679,679,,,679,,,,,,,679,,,679,679,679,679,679,679,679,679,,679,679,679',
',679,679,679,679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679,,,679,,',
',,,679,,,,,,,,,679,,,,,679,679,679,679,,679,679,679,679,,,,,679,679',
',,,,,,679,,679,679,679,61,,679,679,,,,61,61,61,,,61,61,61,,61,,,,,,',
',61,,61,61,61,,,,645,645,645,645,61,61,,61,61,61,61,61,,,,,645,645,645',
',,,,,,,,,,645,645,,,645,61,61,61,61,61,61,61,61,61,61,61,61,61,61,,',
'61,61,61,,,61,,,61,,,61,61,,61,,61,,61,,61,61,,61,61,61,61,61,,61,,61',
',645,645,645,645,,645,645,645,645,,,,61,645,645,61,61,61,61,,61,645',
'61,645,645,645,,61,63,63,63,63,63,,,,63,63,,,,63,,63,63,63,63,63,63',
'63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,63,63,,63,63,63,63,63,63,63,63',
'63,,63,63,63,,63,63,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63',
',63,,,,63,,,,,,,,,63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,64,64',
'64,63,64,63,63,63,64,64,63,63,,64,,64,64,64,64,64,64,64,,,,,,64,64,64',
'64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,64,64,64,64,,64',
'64,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,64,,,,64,,,64,',
',,,,64,,,,,64,64,64,64,,64,64,64,64,,,,,64,64,,,,65,65,65,64,65,64,64',
'64,65,65,64,64,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,',
',65,,,,,,,65,,,65,65,65,65,65,65,65,65,65,65,65,65,,65,65,65,65,65,',
',,,,,,,,,,,,,,,,,,65,,,65,,,65,65,,,65,,,,,,65,,,65,,,,,,65,,,,,65,65',
'65,65,,65,65,65,65,,,,,65,65,,,,676,676,676,65,676,65,65,65,676,676',
'65,65,,676,,676,676,676,676,676,676,676,,,,,,676,676,676,676,676,676',
'676,,,676,,,,,,,676,,,676,676,676,676,676,676,676,676,,676,676,676,',
'676,676,676,676,676,,,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,,',
',,676,,,,,,,,,676,,,,,676,676,676,676,,676,676,676,676,,,,,676,676,',
',,68,68,68,676,68,676,676,676,68,68,676,676,,68,,68,68,68,68,68,68,68',
',,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68',
'68,68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68',
',,,,,,,,68,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,,,69,69,69,68,69',
'68,68,68,69,69,68,68,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69,69,69',
'69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,69,69,69',
',,,,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,,,,,,69,,,,,,,,,69,,,,,69,69',
'69,69,,69,69,69,69,,,,,69,69,,,,72,72,72,69,72,69,69,69,72,72,69,69',
',72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,',
'72,72,72,72,72,72,72,72,,72,72,72,,72,72,72,72,72,,,,,,,,,,,,,,,,,,',
',72,,,72,,,72,72,,,72,,,,,,72,,,,,,,,,72,,,,,72,72,72,72,,72,72,72,72',
',,,,72,72,72,,,,,72,72,,72,72,72,,,72,72,118,118,118,118,118,,,,118',
'118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118,118',
'118,,,118,,,,,,118,118,118,118,118,118,118,118,118,118,118,118,,118',
'118,118,,118,118,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118',
',,118,,118,,,,118,,,,,,,,,118,,,,,118,118,118,118,,118,118,118,118,',
',,,118,118,,,,,,118,118,,118,118,118,,,118,118,123,123,123,,123,,,,123',
'123,,,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123,123',
'123,,,123,,,,,,,123,,,123,123,123,123,123,123,123,123,,123,123,123,',
'123,123,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,,',
',,123,,,,,,,,,123,,,,,123,123,123,123,,123,123,123,123,,,,,123,123,',
',,124,124,124,123,124,123,123,123,124,124,123,123,,124,,124,124,124',
'124,124,124,124,,,,,,124,124,124,124,124,124,124,,,124,,,,,,,124,,,124',
'124,124,124,124,124,124,124,,124,124,124,,124,124,124,124,124,,,,,,',
',,,,,,,,,,,,,124,,,124,,,124,124,,,124,,,,,,124,,,,,,,,,124,,,,,124',
'124,124,124,,124,124,124,124,,,,,124,124,,,,125,125,125,124,125,124',
'124,124,125,125,124,124,,125,,125,125,125,125,125,125,125,,,,,,125,125',
'125,125,125,125,125,,,125,,,,,,,125,,,125,125,125,125,125,125,125,125',
',125,125,125,,125,125,125,125,125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125',
'125,,,125,,,,,,125,,,,,,,,,125,,,,,125,125,125,125,,125,125,125,125',
',,,,125,125,,,,126,126,126,125,126,125,125,125,126,126,125,125,,126',
',126,126,126,126,126,126,126,,,,,,126,126,126,126,126,126,126,,,126',
',,,,,,126,,,126,126,126,126,126,126,126,126,,126,126,126,,126,126,126',
'126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,,,,,126,,,,,,',
',,126,,,,,126,126,126,126,,126,126,126,126,,,,,126,126,,,,,,,126,,126',
'126,126,,,126,126,127,127,127,127,127,,,,127,127,,,,127,,127,127,127',
'127,127,127,127,,,,,,127,127,127,127,127,127,127,,,127,,,,,,127,127',
',127,127,127,127,127,127,127,127,127,,127,127,127,,127,127,127,127,127',
',,,,,,,,,,,,,,,,,,,127,,,127,,,127,127,,,127,,127,,,,127,,,,,,,,,127',
',,,,127,127,127,127,,127,127,127,127,,,,,127,127,,,,213,213,213,127',
'213,127,127,127,213,213,127,127,,213,,213,213,213,213,213,213,213,,',
',,,213,213,213,213,213,213,213,,,213,,,,,,,213,,,213,213,213,213,213',
'213,213,213,,213,213,213,,213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213',
',,213,,,213,213,,,213,,213,,,,213,,,,,,,,,213,,,,,213,213,213,213,,213',
'213,213,213,,,,,213,213,,,,214,214,214,213,214,213,213,213,214,214,213',
'213,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214,214,214',
',,214,,,,,,,214,,,214,214,214,214,214,214,214,214,,214,214,214,,214',
'214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,214,,',
',214,,,,,,,,,214,,,,,214,214,214,214,,214,214,214,214,,,,,214,214,,',
',215,215,215,214,215,214,214,214,215,215,214,214,,215,,215,215,215,215',
'215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215,215',
'215,215,215,215,215,215,,215,215,215,,215,215,215,215,215,,,,,,,,,,',
',,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,,,,215,,,,,215,215',
'215,215,,215,215,215,215,,,,,215,215,,,,216,216,216,215,216,215,215',
'215,216,216,215,215,,216,,216,216,216,216,216,216,216,,,,,,216,216,216',
'216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216',
'216,216,,216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216',
',,216,,,,,,216,,,,,,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,',
'216,216,,,,261,261,261,216,261,216,216,216,261,261,216,216,,261,,261',
'261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,',
',261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261,261,261',
'261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,,261',
',,,,261,261,261,261,,261,261,261,261,,,,,261,261,,,,266,266,266,261',
'266,261,261,261,266,266,261,261,,266,,266,266,266,266,266,266,266,,',
',,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266',
'266,266,266,,266,266,266,,266,266,266,266,266,,,,,,,,,,,,,,,,,,,,266',
',,266,,,266,266,,,266,,,,,,266,,,,,,,,,266,,,,,266,266,266,266,,266',
'266,266,266,,,,,266,266,,,,273,273,273,266,273,266,266,266,273,273,266',
'266,,273,,273,273,273,273,273,273,273,,,,,,273,273,273,273,273,273,273',
',,273,,,,,,,273,,,273,273,273,273,273,273,273,273,273,273,273,273,,273',
'273,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,,273',
',273,,,273,,,,,,273,,,,,273,273,273,273,,273,273,273,273,,,,,273,273',
',,,274,274,274,273,274,273,273,273,274,274,273,273,,274,,274,274,274',
'274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274',
'274,274,274,274,274,274,274,274,274,274,274,,274,274,274,274,274,,,',
',,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,274,,,,,',
'274,,,,,274,274,274,274,,274,274,274,274,,,,,274,274,,,,282,282,282',
'274,282,274,274,274,282,282,274,274,,282,,282,282,282,282,282,282,282',
',,,,,282,282,282,282,282,282,282,,,282,,,,,,,282,,,282,282,282,282,282',
'282,282,282,282,282,282,282,,282,282,282,282,282,,,,,,,,,,,,,,,,,,,',
'282,,,282,,,282,282,,,282,,282,,282,,282,,,282,,,,,,282,,,,,282,282',
'282,282,,282,282,282,282,,,,,282,282,282,,,623,623,623,282,623,282,282',
'282,623,623,282,282,,623,,623,623,623,623,623,623,623,,,,,,623,623,623',
'623,623,623,623,,,623,,,,,,,623,,,623,623,623,623,623,623,623,623,,623',
'623,623,,623,623,623,623,623,,,,,,,,,,,,,,,,,,,,623,,,623,,,623,623',
',,623,,,,,,623,,,,,,,,,623,,,,,623,623,623,623,,623,623,623,623,,,,',
'623,623,,,,1110,1110,1110,623,1110,623,623,623,1110,1110,623,623,,1110',
',1110,1110,1110,1110,1110,1110,1110,,,,,,1110,1110,1110,1110,1110,1110',
'1110,,,1110,,,,,,,1110,,,1110,1110,1110,1110,1110,1110,1110,1110,1110',
'1110,1110,1110,,1110,1110,1110,1110,1110,,,,,,,,,,,,,,,,,,,,1110,,,1110',
',,1110,1110,,,1110,,1110,,1110,,1110,,,1110,,,,,,1110,,,,,1110,1110',
'1110,1110,,1110,1110,1110,1110,,,,,1110,1110,,,,289,289,289,1110,289',
'1110,1110,1110,289,289,1110,1110,,289,,289,289,289,289,289,289,289,',
',,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289,289,289,289,289',
'289,289,289,,289,289,289,,289,289,289,289,289,,,,,,,,,,,,,,,,,,,,289',
',,289,,,289,289,,,289,,,,,,289,,,,,,,,,289,,,,,289,289,289,289,,289',
'289,289,289,,,,,289,289,,,,622,622,622,289,622,289,289,289,622,622,289',
'289,,622,,622,622,622,622,622,622,622,,,,,,622,622,622,622,622,622,622',
',,622,,,,,,,622,,,622,622,622,622,622,622,622,622,,622,622,622,,622',
'622,622,622,622,,,,,,,,,,,,,,,,,,,,622,,,622,,,622,622,,,622,,,,,,622',
',,,,,,,,622,,,,,622,622,622,622,,622,622,622,622,,,,,622,622,,,,291',
'291,291,622,291,622,622,622,291,291,622,622,,291,,291,291,291,291,291',
'291,291,,,,,,291,291,291,291,291,291,291,,,291,,,,,,,291,,,291,291,291',
'291,291,291,291,291,,291,291,291,,291,291,291,291,291,,,,,,,,,,,,,,',
',,,,,291,,,291,,,291,291,,,291,,,,,,291,,,,,,,,,291,,,,,291,291,291',
'291,,291,291,291,291,,,,,291,291,,,,294,294,294,291,294,291,291,291',
'294,294,291,291,,294,,294,294,294,294,294,294,294,,,,,,294,294,294,294',
'294,294,294,,,294,,,,,,,294,,,294,294,294,294,294,294,294,294,,294,294',
'294,,294,294,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,,294',
',,,,,294,,,,,,,,,294,,,,,294,294,294,294,,294,294,294,294,,,,,294,294',
',,,295,295,295,294,295,294,294,294,295,295,294,294,,295,,295,295,295',
'295,295,295,295,,,,,,295,295,295,295,295,295,295,,,295,,,,,,,295,,,295',
'295,295,295,295,295,295,295,,295,295,295,,295,295,295,295,295,,,,,,',
',,,,,,,,,,,,,295,,,295,,,295,295,,,295,,,,,,295,,,,,,,,,295,,,,,295',
'295,295,295,,295,295,295,295,,,,,295,295,,,,,,,295,,295,295,295,,,295',
'295,300,300,300,300,300,,,,300,300,,,,300,,300,300,300,300,300,300,300',
',,,,,300,300,300,300,300,300,300,,,300,,,,,,300,300,,300,300,300,300',
'300,300,300,300,300,,300,300,300,,300,300,300,300,300,,,,,,,,,,,,,,',
',,,,,300,,,300,,,300,300,,,300,,300,,,,300,,,,,,,,,300,,,,,300,300,300',
'300,,300,300,300,300,,,,,300,300,,,,1075,1075,1075,300,1075,300,300',
'300,1075,1075,300,300,,1075,,1075,1075,1075,1075,1075,1075,1075,,,,',
',1075,1075,1075,1075,1075,1075,1075,,,1075,,,,,,,1075,,,1075,1075,1075',
'1075,1075,1075,1075,1075,,1075,1075,1075,,1075,1075,1075,1075,1075,',
',,,,,,,,,,,,,,,,,,1075,,,1075,,,1075,1075,,,1075,,,,,,1075,,,,,,,,,1075',
',,,,1075,1075,1075,1075,,1075,1075,1075,1075,,,,,1075,1075,,,,1074,1074',
'1074,1075,1074,1075,1075,1075,1074,1074,1075,1075,,1074,,1074,1074,1074',
'1074,1074,1074,1074,,,,,,1074,1074,1074,1074,1074,1074,1074,,,1074,',
',,,,,1074,,,1074,1074,1074,1074,1074,1074,1074,1074,,1074,1074,1074',
',1074,1074,1074,1074,1074,,,,,,,,,,,,,,,,,,,,1074,,,1074,,,1074,1074',
',,1074,,,,,,1074,,,,,,,,,1074,,,,,1074,1074,1074,1074,,1074,1074,1074',
'1074,,,,,1074,1074,,,,618,618,618,1074,618,1074,1074,1074,618,618,1074',
'1074,,618,,618,618,618,618,618,618,618,,,,,,618,618,618,618,618,618',
'618,,,618,,,,,,,618,,,618,618,618,618,618,618,618,618,,618,618,618,',
'618,618,618,618,618,,,,,,,,,,,,,,,,,,,,618,,,618,,,618,618,,,618,,,',
',,618,,,,,,,,,618,,,,,618,618,618,618,,618,618,618,618,,,,,618,618,',
',,616,616,616,618,616,618,618,618,616,616,618,618,,616,,616,616,616',
'616,616,616,616,,,,,,616,616,616,616,616,616,616,,,616,,,,,,,616,,,616',
'616,616,616,616,616,616,616,616,616,616,616,,616,616,616,616,616,,,',
',,,,,,,,,,,,,,,,616,,,616,,,616,616,,,616,,,,616,,616,,,616,,,,,,616',
',,,,616,616,616,616,,616,616,616,616,,,,,616,616,,,,615,615,615,616',
'615,616,616,616,615,615,616,616,,615,,615,615,615,615,615,615,615,,',
',,,615,615,615,615,615,615,615,,,615,,,,,,,615,,,615,615,615,615,615',
'615,615,615,615,615,615,615,,615,615,615,615,615,,,,,,,,,,,,,,,,,,,',
'615,,,615,,,615,615,,,615,,615,,615,,615,,,615,,,,,,615,,,,,615,615',
'615,615,,615,615,615,615,,,,,615,615,,,,612,612,612,615,612,615,615',
'615,612,612,615,615,,612,,612,612,612,612,612,612,612,,,,,,612,612,612',
'612,612,612,612,,,612,,,,,,,612,,,612,612,612,612,612,612,612,612,,612',
'612,612,,612,612,612,612,612,,,,,,,,,,,,,,,,,,,,612,,,612,,,612,612',
',,612,,,,,,612,,,,,,,,,612,,,,,612,612,612,612,,612,612,612,612,,,,',
'612,612,,,,,,,612,,612,612,612,,,612,612,611,611,611,611,611,,,,611',
'611,,,,611,,611,611,611,611,611,611,611,,,,,,611,611,611,611,611,611',
'611,,,611,,,,,,611,611,,611,611,611,611,611,611,611,611,611,,611,611',
'611,,611,611,611,611,611,,,,,,,,,,,,,,,,,,,,611,,,611,,,611,611,,,611',
',611,,,,611,,,,,,,,,611,,,,,611,611,611,611,,611,611,611,611,,,,,611',
'611,,,,608,608,608,611,608,611,611,611,608,608,611,611,,608,,608,608',
'608,608,608,608,608,,,,,,608,608,608,608,608,608,608,,,608,,,,,,,608',
',,608,608,608,608,608,608,608,608,608,608,608,608,,608,608,608,608,608',
',,,,,,,,,,,,,,,,,,,608,,,608,,,608,608,,,608,,608,,608,,608,,,608,,',
',,,608,,,,,608,608,608,608,,608,608,608,608,,,,,608,608,,,,607,607,607',
'608,607,608,608,608,607,607,608,608,,607,,607,607,607,607,607,607,607',
',,,,,607,607,607,607,607,607,607,,,607,,,,,,,607,,,607,607,607,607,607',
'607,607,607,,607,607,607,,607,607,607,607,607,,,,,,,,,,,,,,,,,,,,607',
',,607,,,607,607,,,607,,,,,,607,,,,,,,,,607,,,,,607,607,607,607,,607',
'607,607,607,,,,,607,607,,,,606,606,606,607,606,607,607,607,606,606,607',
'607,,606,,606,606,606,606,606,606,606,,,,,,606,606,606,606,606,606,606',
',,606,,,,,,,606,,,606,606,606,606,606,606,606,606,,606,606,606,,606',
'606,606,606,606,,,,,,,,,,,,,,,,,,,,606,,,606,,,606,606,,,606,,606,,',
',606,,,,,,,,,606,,,,,606,606,606,606,,606,606,606,606,,,,,606,606,,',
',,,,606,,606,606,606,,,606,606,604,604,604,604,604,,,,604,604,,,,604',
',604,604,604,604,604,604,604,,,,,,604,604,604,604,604,604,604,,,604',
',,,,,604,604,,604,604,604,604,604,604,604,604,604,,604,604,604,,604',
'604,604,604,604,,,,,,,,,,,,,,,,,,,,604,,,604,,,604,604,,,604,,604,,',
',604,,,,,,,,,604,,,,,604,604,604,604,,604,604,604,604,,,,,604,604,,',
',831,831,831,604,831,604,604,604,831,831,604,604,,831,,831,831,831,831',
'831,831,831,,,,,,831,831,831,831,831,831,831,,,831,,,,,,,831,,,831,831',
'831,831,831,831,831,831,,831,831,831,,831,831,831,831,831,,,,,,,,,,',
',,,,,,,,,831,,,831,,,831,831,,,831,,,,,,831,,,,,,,,,831,,,,,831,831',
'831,831,,831,831,831,831,,,,,831,831,,,,334,334,334,831,334,831,831',
'831,334,334,831,831,,334,,334,334,334,334,334,334,334,,,,,,334,334,334',
'334,334,334,334,,,334,,,,,,,334,,,334,334,334,334,334,334,334,334,,334',
'334,334,,334,334,334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334,,,334,334',
',,334,,,,,,334,,,,,,,,,334,,,,,334,334,334,334,,334,334,334,334,,,,',
'334,334,,,,336,336,336,334,336,334,334,334,336,336,334,334,,336,,336',
'336,336,336,336,336,336,,,,,,336,336,336,336,336,336,336,,,336,,,,,',
',336,,,336,336,336,336,336,336,336,336,,336,336,336,,336,336,336,336',
'336,,,,,,,,,,,,,,,,,,,,336,,,336,336,,336,336,,,336,,,,,,336,,,,,,,',
',336,,,,,336,336,336,336,,336,336,336,336,,,,,336,336,,,,573,573,573',
'336,573,336,336,336,573,573,336,336,,573,,573,573,573,573,573,573,573',
',,,,,573,573,573,573,573,573,573,,,573,,,,,,,573,,,573,573,573,573,573',
'573,573,573,573,573,573,573,,573,573,573,573,573,,,,,,,,,,,,,,,,,,,',
'573,,,573,,,573,573,,,573,,573,,573,,573,,,573,,,,,,573,,,,,573,573',
'573,573,,573,573,573,573,,,,,573,573,,,,563,563,563,573,563,573,573',
'573,563,563,573,573,,563,,563,563,563,563,563,563,563,,,,,,563,563,563',
'563,563,563,563,,,563,,,,,,,563,,,563,563,563,563,563,563,563,563,563',
'563,563,563,,563,563,563,563,563,,,,,,,,,,,,,,,,,,,,563,,,563,,,563',
'563,,,563,,563,,563,,563,,,563,,,,,,563,,,,,563,563,563,563,,563,563',
'563,563,,,,,563,563,,,,562,562,562,563,562,563,563,563,562,562,563,563',
',562,,562,562,562,562,562,562,562,,,,,,562,562,562,562,562,562,562,',
',562,,,,,,,562,,,562,562,562,562,562,562,562,562,,562,562,562,,562,562',
'562,562,562,,,,,,,,,,,,,,,,,,,,562,,,562,,,562,562,,,562,,562,,,,562',
',,,,,,,,562,,,,,562,562,562,562,,562,562,562,562,,,,,562,562,,,,352',
'352,352,562,352,562,562,562,352,352,562,562,,352,,352,352,352,352,352',
'352,352,,,,,,352,352,352,352,352,352,352,,,352,,,,,,,352,,,352,352,352',
'352,352,352,352,352,,352,352,352,,352,352,352,352,352,,,,,,,,,,,,,,',
',,,,,352,,,352,,,352,352,,,352,,,,,,352,,,,,,,,,352,,,,,352,352,352',
'352,,352,352,352,352,,,,,352,352,,,,547,547,547,352,547,352,352,352',
'547,547,352,352,,547,,547,547,547,547,547,547,547,,,,,,547,547,547,547',
'547,547,547,,,547,,,,,,,547,,,547,547,547,547,547,547,547,547,547,547',
'547,547,,547,547,547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547,,,547,547',
',,547,,,,,,547,,,547,,,,,,547,,,,,547,547,547,547,,547,547,547,547,',
',,,547,547,,,,544,544,544,547,544,547,547,547,544,544,547,547,,544,',
'544,544,544,544,544,544,544,,,,,,544,544,544,544,544,544,544,,,544,',
',,,,,544,,,544,544,544,544,544,544,544,544,544,544,544,544,,544,544',
'544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,544,,,,544',
',,544,,,,,,544,,,,,544,544,544,544,,544,544,544,544,,,,,544,544,,,,',
',,544,,544,544,544,,,544,544,7,7,7,7,7,,,,7,7,,,,7,,7,7,7,7,7,7,7,,',
',,,7,7,7,7,7,7,7,,,7,,,,,,7,7,7,7,7,7,7,7,7,7,7,7,,7,7,7,,7,7,7,7,7',
',,,,,,,,,,,,,,,,,,,7,,,7,,,7,7,,,7,,7,,,,7,,,,,,,,,7,,,,,7,7,7,7,,7',
'7,7,7,,,,,7,7,,,,870,870,870,7,870,7,7,7,870,870,7,7,,870,,870,870,870',
'870,870,870,870,,,,,,870,870,870,870,870,870,870,,,870,,,,,,,870,,,870',
'870,870,870,870,870,870,870,,870,870,870,,870,870,870,870,870,,,,,,',
',,,,,,,,,,,,,870,,,870,,,870,870,,,870,,,,,,870,,,,,,,,,870,,,,,870',
'870,870,870,,870,870,870,870,,,,,870,870,,,,538,538,538,870,538,870',
'870,870,538,538,870,870,,538,,538,538,538,538,538,538,538,,,,,,538,538',
'538,538,538,538,538,,,538,,,,,,,538,,,538,538,538,538,538,538,538,538',
',538,538,538,,538,538,538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538',
'538,,,538,,,,,,538,,,,,,,,,538,,,,,538,538,538,538,,538,538,538,538',
',,,,538,538,,,,535,535,535,538,535,538,538,538,535,535,538,538,,535',
',535,535,535,535,535,535,535,,,,,,535,535,535,535,535,535,535,,,535',
',,,,,,535,,,535,535,535,535,535,535,535,535,,535,535,535,,535,535,535',
'535,535,,,,,,,,,,,,,,,,,,,,535,,,535,,,535,535,,,535,,,,,,535,,,,,,',
',,535,,,,,535,535,535,535,,535,535,535,535,,,,,535,535,,,,373,373,373',
'535,373,535,535,535,373,373,535,535,,373,,373,373,373,373,373,373,373',
',,,,,373,373,373,373,373,373,373,,,373,,,,,,,373,,,373,373,373,373,373',
'373,373,373,,373,373,373,,373,373,373,373,373,,,,,,,,,,,,,,,,,,,,373',
',,373,,,373,373,,,373,,,,,,373,,,,,,,,,373,,,,,373,373,373,373,,373',
'373,373,373,,,,,373,373,,,,532,532,532,373,532,373,373,373,532,532,373',
'373,,532,,532,532,532,532,532,532,532,,,,,,532,532,532,532,532,532,532',
',,532,,,,,,,532,,,532,532,532,532,532,532,532,532,,532,532,532,,532',
'532,532,532,532,,,,,,,,,,,,,,,,,,,,532,,,532,,,532,532,,,532,,,,,,532',
',,,,,,,,532,,,,,532,532,532,532,,532,532,532,532,,,,,532,532,,,,885',
'885,885,532,885,532,532,532,885,885,532,532,,885,,885,885,885,885,885',
'885,885,,,,,,885,885,885,885,885,885,885,,,885,,,,,,,885,,,885,885,885',
'885,885,885,885,885,,885,885,885,,885,885,885,885,885,,,,,,,,,,,,,,',
',,,,,885,,,885,,,885,885,,,885,,,,,,885,,,,,,,,,885,,,,,885,885,885',
'885,,885,885,885,885,,,,,885,885,,,,523,523,523,885,523,885,885,885',
'523,523,885,885,,523,,523,523,523,523,523,523,523,,,,,,523,523,523,523',
'523,523,523,,,523,,,,,,,523,,,523,523,523,523,523,523,523,523,523,523',
'523,523,,523,523,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523',
',,523,,523,,523,,523,,,523,,,,,,523,,,,,523,523,523,523,,523,523,523',
'523,,,,,523,523,,,,890,890,890,523,890,523,523,523,890,890,523,523,',
'890,,890,890,890,890,890,890,890,,,,,,890,890,890,890,890,890,890,,',
'890,,,,,,,890,,,890,890,890,890,890,890,890,890,,890,890,890,,890,890',
'890,890,890,,,,,,,,,,,,,,,,,,,,890,,,890,,,890,890,,,890,,890,,,,890',
',,,,,,,,890,,,,,890,890,890,890,,890,890,890,890,,,,,890,890,,,,,,,890',
',890,890,890,,,890,890,513,513,513,513,513,,,,513,513,,,,513,,513,513',
'513,513,513,513,513,,,,,,513,513,513,513,513,513,513,,,513,,,,,,513',
'513,513,513,513,513,513,513,513,513,513,513,,513,513,513,,513,513,513',
'513,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513,,513,,,,513,,,',
',,,,,513,,,,,513,513,513,513,,513,513,513,513,,,,,513,513,,,,,,513,513',
',513,513,513,,,513,513,389,389,389,,389,,,,389,389,,,,389,,389,389,389',
'389,389,389,389,,,,,,389,389,389,389,389,389,389,,,389,,,,,,,389,,,389',
'389,389,389,389,389,389,389,,389,389,389,,389,389,389,389,389,,,,,,',
',,,,,,,,,,,,,389,,,389,,,389,389,,,389,,,,,,389,,,,,,,,,389,,,,,389',
'389,389,389,,389,389,389,389,,,,,389,389,,,,507,507,507,389,507,389',
'389,389,507,507,389,389,,507,,507,507,507,507,507,507,507,,,,,,507,507',
'507,507,507,507,507,,,507,,,,,,,507,,,507,507,507,507,507,507,507,507',
',507,507,507,,507,507,507,507,507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507',
'507,,,507,,,,,,507,,,,,,,,,507,,,,,507,507,507,507,,507,507,507,507',
',,,,507,507,,,,505,505,505,507,505,507,507,507,505,505,507,507,,505',
',505,505,505,505,505,505,505,,,,,,505,505,505,505,505,505,505,,,505',
',,,,,,505,,,505,505,505,505,505,505,505,505,505,505,505,505,,505,505',
'505,505,505,,,,,,,,,,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,505,,505',
',,505,,,,,,505,,,,,505,505,505,505,,505,505,505,505,,,,,505,505,,,,503',
'503,503,505,503,505,505,505,503,503,505,505,,503,,503,503,503,503,503',
'503,503,,,,,,503,503,503,503,503,503,503,,,503,,,,,,,503,,,503,503,503',
'503,503,503,503,503,503,503,503,503,,503,503,503,503,503,,,,,,,,,,,',
',,,,,,,,503,,,503,,,503,503,,,503,,503,,503,,503,,,503,,,,,,503,,,,',
'503,503,503,503,,503,503,503,503,,,,,503,503,,,,910,910,910,503,910',
'503,503,503,910,910,503,503,,910,,910,910,910,910,910,910,910,,,,,,910',
'910,910,910,910,910,910,,,910,,,,,,,910,,,910,910,910,910,910,910,910',
'910,910,910,910,910,,910,910,910,910,910,,,,,,,,,,,,,,,,,,,,910,,,910',
',,910,910,,,910,,,,910,,910,,,910,,,,,,910,,,,,910,910,910,910,,910',
'910,910,910,,,,,910,910,,,,911,911,911,910,911,910,910,910,911,911,910',
'910,,911,,911,911,911,911,911,911,911,,,,,,911,911,911,911,911,911,911',
',,911,,,,,,,911,,,911,911,911,911,911,911,911,911,,911,911,911,,911',
'911,911,911,911,,,,,,,,,,,,,,,,,,,,911,,,911,,,911,911,,,911,,,,,,911',
',,,,,,,,911,,,,,911,911,911,911,,911,911,911,911,,,,,911,911,,,,494',
'494,494,911,494,911,911,911,494,494,911,911,,494,,494,494,494,494,494',
'494,494,,,,,,494,494,494,494,494,494,494,,,494,,,,,,,494,,,494,494,494',
'494,494,494,494,494,,494,494,494,,494,494,494,494,494,,,,,,,,,,,,,,',
',,,,,494,,,494,,,494,494,,,494,,,,,,494,,,,,,,,,494,,,,,494,494,494',
'494,,494,494,494,494,,,,,494,494,,,,,,,494,,494,494,494,489,,494,494',
',,,489,489,489,,,489,489,489,765,489,765,765,765,765,765,,,489,489,489',
',,,765,,,,,,489,489,,489,489,489,489,489,,839,,839,839,839,839,839,765',
',,,,,,,839,765,765,765,765,,,,765,,1154,,1154,1154,1154,1154,1154,489',
',,,,839,,489,1154,,,,489,489,839,839,839,839,,,,839,,,,,,,,,1154,765',
',,,489,489,,,,,1154,1154,,,,1154,839,,,489,,,489,,416,416,416,489,416',
',,,416,416,489,,,416,,416,416,416,416,416,416,416,,,,,,416,416,416,416',
'416,416,416,,,416,,,,,,,416,,,416,416,416,416,416,416,416,416,,416,416',
'416,,416,416,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416',
',,,,,416,,,,,,,,,416,,,,,416,416,416,416,,416,416,416,416,,,,,416,416',
',,,463,463,463,416,463,416,416,416,463,463,416,416,,463,,463,463,463',
'463,463,463,463,,,,,,463,463,463,463,463,463,463,,,463,,,,,,,463,,,463',
'463,463,463,463,463,463,463,,463,463,463,,463,463,463,463,463,,,,,,',
',,,,,,,,,,,,,463,,,463,,,463,463,,,463,,,,,,463,,,,,,,,,463,,,,,463',
'463,463,463,,463,463,463,463,,,,,463,463,,,,462,462,462,463,462,463',
'463,463,462,462,463,463,,462,,462,462,462,462,462,462,462,,,,,,462,462',
'462,462,462,462,462,,,462,,,,,,,462,,,462,462,462,462,462,462,462,462',
',462,462,462,,462,462,462,462,462,,,,,,,,,,,,,,,,,,,,462,,,462,,,462',
'462,,,462,,,,,,462,,,,,,,,,462,,,,,462,462,462,462,,462,462,462,462',
',,,,462,462,,,,461,461,461,462,461,462,462,462,461,461,462,462,,461',
',461,461,461,461,461,461,461,,,,,,461,461,461,461,461,461,461,,,461',
',,,,,,461,,,461,461,461,461,461,461,461,461,,461,461,461,,461,461,461',
'461,461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461,461,,,461,,,,,,461,,,,,,',
',,461,,,,,461,461,461,461,,461,461,461,461,,,,,461,461,,,,459,459,459',
'461,459,461,461,461,459,459,461,461,,459,,459,459,459,459,459,459,459',
',,,,,459,459,459,459,459,459,459,,,459,,,,,,,459,,,459,459,459,459,459',
'459,459,459,459,459,459,459,,459,459,459,459,459,,,,,,,,,,,,,,,,,,,',
'459,,,459,,,459,459,,,459,,459,,459,,459,,,459,,,,,,459,,,,,459,459',
'459,459,,459,459,459,459,,,,,459,459,,,,,,,459,,459,459,459,450,,459',
'459,,,,450,450,450,,,450,450,450,,450,,,,,,,,450,450,450,450,450,,,',
',,,,450,450,,450,450,450,450,450,,,,,,,,,,,,,,,,,,,,,,,450,450,450,450',
'450,450,450,450,450,450,450,450,450,450,,,450,450,450,,,450,,,450,,',
'450,450,,450,,450,,450,,450,450,,450,450,450,450,450,,450,450,450,,',
',,,,,,,,,,,450,,,450,450,450,450,,450,,450,,236,236,236,450,236,,,,236',
'236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236,236',
'236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236,',
'236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,',
',,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236,236,,,,,236,236,',
',,240,240,240,236,240,236,236,236,240,240,236,236,,240,,240,240,240',
'240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240',
'240,240,240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,',
',,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240',
'240,240,240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240',
'240,240,241,241,240,240,,241,,241,241,241,241,241,241,241,,,,,,241,241',
'241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241',
',241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241',
'241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241',
',,,,241,241,,,,242,242,242,241,242,241,241,241,242,242,241,241,,242',
',242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242',
',,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242',
'242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,',
',,242,,,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,243,243,243',
'242,243,242,242,242,243,243,242,242,,243,,243,243,243,243,243,243,243',
',,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243',
'243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243',
',,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243',
'243,243,243,,,,,243,243,,,,244,244,244,243,244,243,243,243,244,244,243',
'243,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244',
',,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244',
'244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244',
',,,,,,,,244,,,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,245',
'245,245,244,245,244,244,244,245,245,244,244,,245,,245,245,245,245,245',
'245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245',
'245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,',
',,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245',
'245,,245,245,245,245,,,,,245,245,,,,246,246,246,245,246,245,245,245',
'246,246,245,245,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246',
'246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246',
'246,,246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246',
',,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246',
',,,247,247,247,246,247,246,246,246,247,247,246,246,,247,,247,247,247',
'247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247',
'247,247,247,247,247,247,247,,247,247,247,,247,247,247,247,247,,,,,,',
',,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247',
'247,247,247,,247,247,247,247,,,,,247,247,,,,248,248,248,247,248,247',
'247,247,248,248,247,247,,248,,248,248,248,248,248,248,248,,,,,,248,248',
'248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248',
',248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248',
'248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248,248',
',,,,248,248,,,,249,249,249,248,249,248,248,248,249,249,248,248,,249',
',249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249',
',,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,249',
'249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,',
',,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249,,,,250,250,250',
'249,250,249,249,249,250,250,249,249,,250,,250,250,250,250,250,250,250',
',,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250',
'250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250',
',,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250',
'250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250,251,251,250',
'250,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251',
',,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251',
'251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251',
',,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251,,,,252',
'252,252,251,252,251,251,251,252,252,251,251,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,',
',,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252',
'252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252',
'253,253,252,252,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253',
'253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253',
'253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253',
',,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',,,254,254,254,253,254,253,253,253,254,254,253,253,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,',
',,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254',
'254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254',
'254,254,255,255,254,254,,255,,255,255,255,255,255,255,255,,,,,,255,255',
'255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255',
',255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255',
'255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255',
',,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,255,255,,256',
',256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256',
',,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,256',
'256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,',
',,256,,,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257,257,257',
'256,257,256,256,256,257,257,256,256,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257',
'257,257,257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257',
',,257,,,257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257',
'257,257,257,,,,,257,257,,,,258,258,258,257,258,257,257,257,258,258,257',
'257,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258',
',,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258',
'258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258',
',,,,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,259',
'259,259,258,259,258,258,258,259,259,258,258,,259,,259,259,259,259,259',
'259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259',
'259,259,259,259,259,,259,259,259,,259,259,259,259,259,,,,,,,,,,,,,,',
',,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,,,,259,259,259',
'259,,259,259,259,259,,,,,259,259,,,,260,260,260,259,260,259,259,259',
'260,260,259,259,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260',
'260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260',
'260,,260,260,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260',
',,,,,260,,,,,,,,,260,,,,,260,260,260,260,,260,260,260,260,,,,,260,260',
',,,529,529,529,260,529,260,260,260,529,529,260,260,,529,,529,529,529',
'529,529,529,529,,,,,,529,529,529,529,529,529,529,,,529,,,,,,,529,,,529',
'529,529,529,529,529,529,529,,529,529,529,,529,529,,,529,,,,,,,,,,,,',
',,,,,,,529,,,529,,,529,529,,,529,,,,,,,,,,,,,,,,,,,,529,529,529,529',
',529,529,529,529,,,,,529,529,,,,37,37,37,529,37,529,529,529,37,37,,',
',37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,',
'37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,37,,,,,,,,,,,,,,,,,,,,37',
',,37,,,37,37,,,37,,,1135,,1135,1135,1135,1135,1135,,,,,,,,,1135,,37',
'37,37,37,,37,37,37,37,,,,,37,37,,,,37,,1135,37,,37,37,37,966,966,966',
',966,1135,1135,,966,966,1135,,,966,,966,966,966,966,966,966,966,,,,',
',966,966,966,966,966,966,966,,,966,,,,,,,966,,,966,966,966,966,966,966',
'966,966,,966,966,966,,966,966,,,966,,,,,,,,,,,,,,,,,,,,966,,,966,,,966',
'966,,,966,,,,,,,,,,,,,,,,,,,,966,966,966,966,,966,966,966,966,,,,,966',
'966,,,,36,36,36,966,36,966,966,966,36,36,,,,36,,36,36,36,36,36,36,36',
',,,,,36,36,36,36,36,36,36,,,36,,,,,,,36,,,36,36,36,36,36,36,36,36,,36',
'36,36,,36,36,,,36,,,,,,,,,,,,,,,,,,,,36,,,36,,,36,36,,,36,,36,,,,,,',
',,,,,,,,,,,36,36,36,36,,36,36,36,36,,,,,36,36,,,,325,325,325,36,325',
'36,36,36,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325',
'325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325,325,,325',
'325,325,,325,325,,,325,,,,,,,,,,,,,,,,,,,,325,,,325,,,325,325,,,325',
',,,,,,,,,,,,,,,,,,,325,325,325,325,,325,325,325,325,,,,,325,325,,,,75',
'75,75,325,75,325,325,325,75,75,,,,75,,75,75,75,75,75,75,75,,,,,,75,75',
'75,75,75,75,75,,,75,,,,,,,75,,,75,75,75,75,75,75,75,75,,75,75,75,,75',
'75,,,75,,,,,,,,,,,,,,,,,,,,75,,,75,,,75,75,,,75,,,,,,,,,,,,,,,,,,,,75',
'75,75,75,,75,75,75,75,,,,,75,75,,,,74,74,74,75,74,75,75,75,74,74,,,',
'74,,74,74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74,,,74,,,,,,,74,,,74',
'74,74,74,74,74,74,74,,74,74,74,,74,74,,,74,,,,,,,,,,,,,,,,,74,,,74,',
',74,,,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,74,74,74,,74,74,74,74,,,,,74',
'74,,,,521,521,521,74,521,74,74,74,521,521,,,,521,,521,521,521,521,521',
'521,521,,,,,,521,521,521,521,521,521,521,,,521,,,,,,,521,,,521,521,521',
'521,521,521,521,521,,521,521,521,,521,521,,,521,,,,,,,,,,,,,,,,,,,,521',
',,521,,,521,521,,,521,,,,,,,,,,,,,,,,,,,,521,521,521,521,,521,521,521',
'521,,,,,521,521,,,,73,73,73,521,73,521,521,521,73,73,,,,73,,73,73,73',
'73,73,73,73,,,,,,73,73,73,73,73,73,73,,,73,,,,,,,73,,,73,73,73,73,73',
'73,73,73,,73,73,73,,73,73,,,73,,,,,,,,,,,,,,,,,,,,73,,,73,,,73,73,,',
'73,,73,,,,,,,,,,,,,,,,,,73,73,73,73,,73,73,73,73,,,,,73,73,,,,1044,1044',
'1044,73,1044,73,73,73,1044,1044,,,,1044,,1044,1044,1044,1044,1044,1044',
'1044,,,,,,1044,1044,1044,1044,1044,1044,1044,,,1044,,,,,,,1044,,,1044',
'1044,1044,1044,1044,1044,1044,1044,,1044,1044,1044,,1044,1044,,,1044',
',,,,,,,,,,,,,,,,,,,1044,,,1044,,,1044,1044,,,1044,,,,,,,,,,,,,,,,,,',
',1044,1044,1044,1044,,1044,1044,1044,1044,,,,,1044,1044,,,,682,682,682',
'1044,682,1044,1044,1044,682,682,,,,682,,682,682,682,682,682,682,682',
',,,,,682,682,682,682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682',
'682,682,682,,682,682,682,,682,682,,,682,,,,,,,,,,,,,,,,,,,,682,,,682',
',,682,682,,,682,,,,,,,,,,,,,,,,,,,,682,682,682,682,,682,682,682,682',
',,,,682,682,,,,693,693,693,682,693,682,682,682,693,693,,,,693,,693,693',
'693,693,693,693,693,,,,,,693,693,693,693,693,693,693,,,693,,,,,,,693',
',,693,693,693,693,693,693,693,693,,693,693,693,,693,693,,,693,,,,,,',
',,,,,,,,,,,,,693,,,693,,,693,693,,,693,,,,,,,,,,,,,,,,,,,,693,693,693',
'693,,693,693,693,693,,,,,693,693,,,,957,957,957,693,957,693,693,693',
'957,957,,,,957,,957,957,957,957,957,957,957,,,,,,957,957,957,957,957',
'957,957,,,957,,,,,,,957,,,957,957,957,957,957,957,957,957,,957,957,957',
',957,957,,,957,,,,,,,,,,,,,,,,,,,,957,,,957,,,957,957,,,957,,,,,,,,',
',,,,,,,,,,,957,957,957,957,,957,957,957,957,,,,,957,957,,,,308,308,308',
'957,308,957,957,957,308,308,,,,308,,308,308,308,308,308,308,308,,,,',
',308,308,308,308,308,308,308,,,308,,,,,,,308,,,308,308,308,308,308,308',
'308,308,,308,308,308,,308,308,,,308,,,,,,,,,,,,,,,,,,,,308,,,308,,,308',
'308,,,308,,,,,,,,,,,,,,,,,,,,308,308,308,308,,308,308,308,308,,,,,308',
'308,,,,308,,,308,,308,308,308,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,',
',,,11,11,11,11,11,11,11,11,11,,,11,,,,,,,,11,11,,11,11,11,11,11,11,11',
',,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11',
'11,11,11,,,11,11,,,,,,,,,,,,,,11,407,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,,,,407,407',
'407,407,407,407,407,407,407,407,,,,,,407,407,407,407,407,407,407,407',
'407,,,407,,,,,,,,407,407,,407,407,407,407,407,407,407,,,407,407,,,,407',
'407,407,407,,,,,,,,,,,,,,407,407,,407,407,407,407,407,407,407,407,407',
'407,407,407,,,407,407,,,,,,,,,,,,,,407,10,10,10,10,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,,,,10,10,10,10,10,10,10,10',
'10,10,,,,,,10,10,10,10,10,10,10,10,10,10,,10,,,,,,,,10,10,,10,10,10',
'10,10,10,10,,,10,10,,,,10,10,10,10,,,,,,,,,,,,,,10,10,,10,10,10,10,10',
'10,10,10,10,10,10,10,,,10,10,,,,,,,,,,,,,,10,602,602,602,602,602,602',
'602,602,602,602,602,602,602,602,602,602,602,602,602,602,602,602,602',
'602,,,,602,602,602,602,602,602,602,602,602,602,,,,,,602,602,602,602',
'602,602,602,602,602,,,602,,,,,,,,602,602,,602,602,602,602,602,602,602',
',,602,602,,,,602,602,602,602,,,,,,,,,,,,,,602,602,,602,602,602,602,602',
'602,602,602,602,602,602,602,,,602,602,,,,,,,,,,,,,,602,767,767,767,767',
'767,767,767,767,767,767,767,767,767,767,767,767,767,767,767,767,767',
'767,767,767,,,,767,767,767,767,767,767,767,767,767,767,,,,,,767,767',
'767,767,767,767,767,767,767,,,767,,,,,,,,767,767,,767,767,767,767,767',
'767,767,,,767,767,,,,767,767,767,767,,,,,,,,,,,,,,767,767,,767,767,767',
'767,767,767,767,767,767,767,767,767,,,767,815,815,815,815,,,1137,,1137',
'1137,1137,1137,1137,,,,815,815,815,815,,1137,,815,815,,,,,815,815,,',
'815,815,,,,,,,,,1137,,,,,,,,,,815,1137,1137,815,,,1137,815,,,815,,815',
',,,,,,815,,,,,,,815,,,,815,815,815,815,,815,815,815,815,,,,,815,815',
'811,811,811,811,,,815,,815,815,815,,,815,815,,811,811,811,811,,,766',
'811,766,766,766,766,766,811,811,,,811,,,,766,,,,,,,,,,,,,,,,811,,,811',
',,766,811,,,811,,,,,766,766,766,766,,,,766,,,,811,,,,811,811,811,811',
',811,811,811,811,,,,,811,811,1018,1018,1018,1018,,,811,,811,811,811',
',,811,811,,1018,1018,1018,1018,,,866,1018,866,866,866,866,866,1018,1018',
',,1018,,,,866,,,,,,,,,,,,,,,,1018,,,1018,,,866,1018,,,1018,,,,,866,866',
'866,866,,,,866,,,,1018,,,,1018,1018,1018,1018,,1018,1018,1018,1018,',
',,,1018,1018,464,464,464,464,,,1018,,1018,1018,1018,,,1018,1018,,464',
'464,464,464,,,868,464,868,868,868,868,868,464,464,,,464,,,,868,,,,,',
',,,,,,,,,,464,,,464,,,868,464,,,464,,,,,,,868,868,,,,868,,,,464,,,,464',
'464,464,464,,464,464,464,464,,,,,464,464,889,889,889,889,,,464,,464',
'464,464,,,464,464,,889,889,889,889,,,,889,889,,,,,889,889,,,889,889',
',,,,,,,,,,,,,,,,,,889,,,889,,,,889,,,889,,889,,,,,,,889,,,,,,,889,,',
',889,889,889,889,,889,889,889,889,,,,,889,889,919,919,919,919,,,889',
',889,889,889,,,889,889,,919,919,919,919,,,1059,919,1059,1059,1059,1059',
'1059,919,919,,,919,,,,1059,,,,,,,,,,,,,,,,919,,,919,,,1059,919,,,919',
',919,,,1059,1059,1059,1059,,,,1059,,,,919,,,,919,919,919,919,,919,919',
'919,919,,,,,919,919,817,817,817,817,,,919,,919,919,919,,,919,919,,817',
'817,817,817,,,1061,817,1061,1061,1061,1061,1061,817,817,,,817,,,,1061',
',,,,,,,,,,,,,,,817,,,817,,,1061,817,,,817,,817,,,,,1061,1061,,,,1061',
',,,817,,,,817,817,817,817,,817,817,817,817,,,,,817,817,1128,1128,1128',
'1128,,,817,,817,817,817,,,817,817,,1128,1128,1128,1128,,,1139,1128,1139',
'1139,1139,1139,1139,1128,1128,,,1128,,,,1139,,,,,,,,,,,,,,,,1128,,,1128',
',,1139,1128,,,1128,,,,,,,1139,1139,,,,1139,,,,1128,,,,1128,1128,1128',
'1128,,1128,1128,1128,1128,,,,,1128,1128,,,,,,,1128,,1128,1128,1128,',
',1128,1128,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76',
'76,76,76,76,76,,,,76,76,76,76,76,76,76,76,76,76,,,,,,76,76,76,76,76',
'76,76,76,76,76,76,76,,76,,,,,,76,76,,76,76,76,76,76,76,76,,,76,76,,',
',76,76,76,76,,,,,,76,,,,,,,,76,76,,76,76,76,76,76,76,76,76,76,76,76',
'76,,,76,814,814,814,814,,,1063,,1063,1063,1063,1063,1063,,,,814,814',
'814,814,,1063,,814,814,,,,,814,814,,,814,814,,,,,,,,,1063,,,,,,,,,,814',
'1063,1063,814,,,1063,814,,,814,,814,,,,,,,814,,,,,,,814,,,,814,814,814',
'814,,814,814,814,814,,,,,814,814,822,822,822,822,,,814,,814,814,814',
',,814,814,,822,822,822,822,,,1065,822,1065,1065,1065,1065,1065,822,822',
',,822,,,,1065,,,,,,,,,,,,,,,,822,,,822,,,1065,822,,,822,,,,,,,1065,1065',
',,,1065,,,,822,,,,822,822,822,822,,822,822,822,822,,,,,822,822,1085',
'1085,1085,1085,,,822,,822,822,822,,,822,822,,1085,1085,1085,1085,,,864',
'1085,864,864,864,864,864,1085,1085,,,1085,,,,864,,,,,,,,,,,,,,,,1085',
',,1085,,,864,1085,,,1085,,,,,864,864,864,864,,,,864,,,,1085,,,,1085',
'1085,1085,1085,,1085,1085,1085,1085,,,,,1085,1085,1084,1084,1084,1084',
',,1085,,1085,1085,1085,,,1085,1085,,1084,1084,1084,1084,,,704,1084,704',
'704,704,704,704,1084,1084,,,1084,,,,704,,,,,,,,,,,,,,,,1084,,,1084,',
',704,1084,,,1084,,,,,704,704,704,704,,,,704,,,,1084,,,,1084,1084,1084',
'1084,,1084,1084,1084,1084,,,,,1084,1084,1076,1076,1076,1076,,,1084,',
'1084,1084,1084,,,1084,1084,,1076,1076,1076,1076,,,1039,1076,1039,1039',
'1039,1039,1039,1076,1076,,,1076,,,,1039,,,,,,,,,,,,,,,,1076,,,1076,',
',1039,1076,,,1076,,1076,,,,,1039,1039,,,,1039,,,,1076,,,,1076,1076,1076',
'1076,,1076,1076,1076,1076,,,,,1076,1076,927,927,927,927,,,1076,,1076',
'1076,1076,,,1076,1076,,927,927,927,927,,,1175,927,1175,1175,1175,1175',
'1175,927,927,,,927,,,,1175,,,,,,,,,,,,,,,,927,,,927,,,1175,927,,,927',
',,,,,,1175,1175,,,,1175,,,,927,,,,927,927,927,927,,927,927,927,927,',
',,,927,927,1131,1131,1131,1131,,,927,,927,927,927,,,927,927,,1131,1131',
'1131,1131,,,,1131,,,,,,1131,1131,,,1131,,,,,,,,646,646,646,646,,,,,',
',,,1131,,,1131,646,646,646,1131,,,1131,,,,,,,646,646,,,646,,,,,1131',
',,,1131,1131,1131,1131,,1131,1131,1131,1131,,,,,1131,1131,,,,,,,1131',
',1131,1131,1131,,,1131,1131,,,,,,,,,,,,646,646,646,646,,646,646,646',
'646,,,,,646,646,824,824,824,824,,,646,,646,646,646,,,,,,824,824,824',
'457,457,,,457,,,,,,824,824,457,457,824,457,457,457,457,457,457,457,',
',457,457,,,,457,457,457,457,,,,,,457,,,,,,,,457,457,,457,457,457,457',
'457,457,457,457,457,457,457,457,,,457,824,824,824,824,,824,824,824,824',
',,,,824,824,458,458,,,458,,824,,824,824,824,,458,458,,458,458,458,458',
'458,458,458,,,458,458,,,,458,458,458,458,,,,,,458,,,,,,,,458,458,,458',
'458,458,458,458,458,458,458,458,458,458,458,524,524,458,,524,,,,,,,',
'524,524,,524,524,524,524,524,524,524,,,524,524,,,,524,524,524,524,,',
',,,524,,,,,,,,524,524,,524,524,524,524,524,524,524,524,524,524,524,524',
'525,525,524,,525,,,,,,,,525,525,,525,525,525,525,525,525,525,,,525,525',
',,,525,525,525,525,,,,,,525,,,,,,,,525,525,,525,525,525,525,525,525',
'525,525,525,525,525,525,533,533,525,,533,,,,,,,,533,533,,533,533,533',
'533,533,533,533,,,533,533,,,,533,533,533,533,,,,,,533,,,,,,,,533,533',
',533,533,533,533,533,533,533,533,533,533,533,533,534,534,533,,534,,',
',,,,,534,534,,534,534,534,534,534,534,534,,,534,534,,,,534,534,534,534',
',,,,,534,,,,,,,,534,534,,534,534,534,534,534,534,534,534,534,534,534',
'534,564,564,534,,564,,,,,,,,564,564,,564,564,564,564,564,564,564,,,564',
'564,,,,564,564,564,564,,,,,,564,,,,,,,,564,564,,564,564,564,564,564',
'564,564,564,564,564,564,564,565,565,564,,565,,,,,,,,565,565,,565,565',
'565,565,565,565,565,,,565,565,,,,565,565,565,565,,,,,,565,,,,,,,,565',
'565,,565,565,565,565,565,565,565,565,565,565,565,565,571,571,565,,571',
',,,,,,,571,571,,571,571,571,571,571,571,571,,,571,571,,,,571,571,571',
'571,,,,,,571,,,,,,,,571,571,,571,571,571,571,571,571,571,571,571,571',
'571,571,572,572,571,,572,,,,,,,,572,572,,572,572,572,572,572,572,572',
',,572,572,,,,572,572,572,572,,,,,,572,,,,,,,,572,572,,572,572,572,572',
'572,572,572,572,572,572,572,572,609,609,572,,609,,,,,,,,609,609,,609',
'609,609,609,609,609,609,,,609,609,,,,609,609,609,609,,,,,,609,,,,,,',
',609,609,,609,609,609,609,609,609,609,609,609,609,609,609,610,610,609',
',610,,,,,,,,610,610,,610,610,610,610,610,610,610,,,610,610,,,,610,610',
'610,610,,,,,,610,,,,,,,,610,610,,610,610,610,610,610,610,610,610,610',
'610,610,610,1107,1107,610,,1107,,,,,,,,1107,1107,,1107,1107,1107,1107',
'1107,1107,1107,,,1107,1107,,,,1107,1107,1107,1107,,,,,,1107,,,,,,,,1107',
'1107,,1107,1107,1107,1107,1107,1107,1107,1107,1107,1107,1107,1107,1111',
'1111,1107,,1111,,,,,,,,1111,1111,,1111,1111,1111,1111,1111,1111,1111',
',,1111,1111,,,,1111,1111,1111,1111,,,,,,1111,,,,,,,,1111,1111,,1111',
'1111,1111,1111,1111,1111,1111,1111,1111,1111,1111,1111,1112,1112,1111',
',1112,,,,,,,,1112,1112,,1112,1112,1112,1112,1112,1112,1112,,,1112,1112',
',,,1112,1112,1112,1112,,,,,,1112,,,,,,,,1112,1112,,1112,1112,1112,1112',
'1112,1112,1112,1112,1112,1112,1112,1112,269,269,1112,,269,,,,,,,,269',
'269,,269,269,269,269,269,269,269,,,269,269,,,,269,269,269,269,,,,,,',
',,,,,,,269,269,,269,269,269,269,269,269,269,269,269,269,269,269,220',
'220,269,,220,,,,,,,,220,220,,220,220,220,220,220,220,220,,,220,220,',
',,220,220,220,220,,,,,,220,,,,,,,,220,220,,220,220,220,220,220,220,220',
'220,220,220,220,220,219,219,220,,219,,,,,,,,219,219,,219,219,219,219',
'219,219,219,,,219,219,,,,219,219,219,219,,,,,,219,,,,,,,,219,219,,219',
'219,219,219,219,219,219,219,219,219,219,219,,1037,219,1037,1037,1037',
'1037,1037,,1035,,1035,1035,1035,1035,1035,1037,,,,,,,,1035,,552,,552',
'552,552,552,552,,,,,,1037,,,552,,,,,1035,1037,1037,1037,1037,,,,1037',
'1035,1035,1035,1035,,,,1035,552,552,1133,,1133,1133,1133,1133,1133,552',
'552,552,552,,,,552,1133,,,,,,,,,,,,,,,,,,,,,,1133,,,,,,,,,1133,1133',
'1133,1133,,,,1133' ]
        racc_action_check = arr = ::Array.new(27177, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1155,  1839,   780,   nil,   451,   nil, 15732,  1392,  1283,
 23913, 23657,  1281,   nil,  1245,  1243,   674,  1281,   629,   -80,
   nil,   -35,  7121,   975,  1335,   nil,   -55,   nil,   258,  7393,
  7503,  7637,  7768,  7899,   nil,  5007, 22208, 21938,   nil,  1226,
   389,   362,  1302,  8161,  8292,   358,  8423,  8554,   637,  8685,
  1223,   663,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  8957,   nil,  9098,  9229,  9360,   -13,   nil,  9622,  9753,
   nil,   nil,  9884, 22863, 22601, 22470, 25081,   nil,   nil,   nil,
   nil,   nil,   971,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   110,   nil,   nil,   222,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 10027,   nil,
   nil,   nil,   nil, 10170, 10301, 10432, 10563, 10706,   nil,  1695,
   nil,   637,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1216,   nil,  1983, 10837, 10968, 11099, 11230,  5138,  5269, 26946,
 26885,   nil,   nil,  5662,  5793,  5924,   nil,   nil,   732,   382,
   470,  1288,   -82,  1178,  1233,   nil, 18925,  3999,  1188,   nil,
 19056, 19187, 19318, 19449, 19580, 19711, 19842, 19973, 20104, 20235,
 20366, 20497, 20628, 20759, 20890, 21021, 21152, 21283, 21414, 21545,
 21676, 11361,   nil,   nil,   nil,   nil, 11492,   nil,   nil, 26824,
   nil,   nil,  1180, 11623, 11754,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 11885,   nil,  1839,   nil,  1142,  1139,   nil, 12278,
  1183, 12540,   nil,   nil, 12671, 12802,   nil,   nil,   478,   nil,
 12945,  1248,  1131,  1087,  4719,  1101,  1133,  1085, 23518,  4575,
   847,   975,  1017,  1160,  1119,   nil,  1119,  1076,   301,   nil,
   nil,   nil,  1116,   171,  1067, 22339,   nil,   437,  1407,  2703,
  2847,  1133,   nil,  1113, 14672,   nil, 14803,  1119,  1104,  1031,
   nil,   608,   593,  1066,  1043,   510,  1046,   nil,   nil,   795,
    35,    36, 15327,  3135,  2271,    72,  1116,   996,    -5,    -1,
  1449,  1073,     7,  1102,   nil,   nil,   560,   387,   342,   nil,
  1305,   nil,   998, 16256,   nil,   nil,   nil,   842,   743,   735,
   733,   665,   637,   604,   347,   312,   nil,   281,   nil, 17066,
   nil,   476,   481,   543,   549,   486,   -34,   -32,   368,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   966, 23785,   nil,   nil,
   nil,   nil,   958,   nil,  1026,   932, 18123,   929,   nil,   nil,
   846,   nil,  1263,   -56,   945,   nil,   nil,  1119,   nil,   nil,
   nil,   nil,   nil,  1263,   857,   nil,   849,   794,   358,   141,
  6725,   nil,   nil,   nil,   442,     0,   833,   nil,   nil,  6589,
 18788,   nil,   nil,   nil,   -26,   nil,   831, 25891, 25970, 18647,
   343, 18516, 18385, 18254, 24546,  2991,  3279,  2155,  2390,   827,
   824,   821,   816,  4287,  4575,  4431,  2559,  2415,  4143,  3999,
  3567,  3423,  2299,  2241,  3135,  3711,  1983,  3855,   nil, 17993,
   nil,   nil,   nil,   nil, 17852,   738,   730,   nil,   nil,   nil,
   729,   nil,   nil, 17459,   nil, 17328,   nil, 17197,   nil,   473,
   nil,   nil,   nil, 16923,  1536,   nil,   718,   696,   nil,   nil,
   682, 22732,   678, 16649, 26031, 26092,  1161,   717,   nil, 21807,
   657,   nil, 16387, 26153, 26214, 16125,  2271,  1407, 15994,   732,
   728,   582,   611,   nil, 15589,   nil,   nil, 15458,   nil,   nil,
   nil,   nil, 27033,  4287,   666,   nil,  4431,   149,   667,   653,
   368,   624, 15196, 15065, 26275, 26336,    25,   nil,   nil,   593,
   nil, 26397, 26458, 14934,   nil,   nil,    60,   975,   507,   nil,
   189,   nil,   nil,   nil,   958,   nil,   nil,   nil,   443,   nil,
   nil,   261,   nil,   302,   nil,   nil,   424,   nil,   372,   nil,
   nil,   nil, 24041,   nil, 14410,   367, 14267, 14136, 14005, 26519,
 26580, 13874, 13731,   471,   392, 13600, 13469,  6448, 13338,   374,
   nil,   nil, 12409, 12016,   337,   nil,   nil,   nil,   115,   142,
   691,   552,   291,   250,   nil,   204,   nil,   nil,   412,   220,
   -78,   nil,   756,   nil,   nil,  8957, 25793,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   218,     4,
   nil,    92,   196,   nil,    74,   -24,   nil,   nil,   nil,   -56,
   -76,  1523,   nil,  1398,   nil,  1434,  9491,   nil,   nil,  8816,
   nil,   123, 23125,  1387,   nil,  1389,   233,   246,  1422,   357,
   768,  1414,  1364, 23256,   nil,  1430,    44,  1480,  7252,   nil,
   nil,   nil,   247,   nil, 25461,   nil,  1360,  1354,  1334,   nil,
  1317,  1316,  1315,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1301,  2172,   nil,   nil,  6859,   nil,   nil,   nil,   140,
   nil,   nil,   nil,  1393,   nil,   nil,  1392,   737,   nil,  1406,
   nil,   nil,   nil,   nil,   nil,  1410,  1412,   nil,   nil,   143,
  1293,   -19,    26,    -4,    27,  2991,   699,   659,   nil,  1333,
  2415,  6990,   nil,  1479,  2559, 17957, 24353, 24169,   nil,   nil,
   nil,   nil,   nil,   nil,  3423,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1368,  8030,  1376,   418,   216,   332,   830,
   nil,  1695,  5400,   nil,  -106,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  5531,  6055,  6186,  6317,   -83,
   202, 24350,   121,   173, 25164, 24252,   332, 24840,   nil,   898,
   nil,   348, 25262,   830, 25891,   nil,   nil,   nil,   nil,   nil,
   nil, 14541,   nil,   421,   nil,   nil,   430,   nil,   nil, 17987,
  2127,   nil,   nil,   nil,   nil,   438,   327,   nil,   nil,   609,
   nil,  1263,   508,   560,   nil,   nil,   nil,     6,   536,   784,
   nil,   nil,   654,   nil, 25363,   nil, 24451,   nil, 24549,   nil,
 15863,   nil,  2142,   nil,   622,   639,  1825,   652,   nil,   nil,
   nil,   nil,   nil,   777,   nil, 16518,   786,   nil,   nil, 24644,
 16780,  4143,     8,   833,   nil,   838,   590,  3855,   nil,   840,
   721,   723,   nil,   521,   nil,   729,   725,   445,   nil,   nil,
 17590, 17721,   nil,   nil,   nil,   nil,   -72,   746,   751, 24742,
   nil,   753,   148,   756,   nil,   nil,   nil, 25654,   nil,   nil,
   309,   764,   781,   nil,   785,   787,   nil,   nil,   -70,   nil,
   nil,   nil,  1551,  2847,   nil,   796,   811,   816,   nil,   822,
   823,   829,   nil,   858,   841,   838,   829, 23387,   nil,   nil,
   nil,   nil,  3567,   nil,   nil,    79, 22077,   nil,   nil,   nil,
   nil,   910,   868,   nil,   952,   nil,   nil,   885,   898,   nil,
   902,   922,   nil,   923,   nil,   nil,   931,  2113,  2495,   nil,
   nil,   nil,   145,   nil,     9,   774,   -69,   nil,   nil,   nil,
    42,   nil,   nil,   nil,  1079,   nil,   nil,   nil,   nil,  1000,
   nil,   nil,   nil,  1013,   969,   121,   nil,   983, 24448,   278,
  1040,   413,   nil,   nil,   nil,   nil,   nil,   nil,   328,   nil,
   nil,  1008,   nil,   nil,   nil, 27016,   nil, 27008,   nil, 25559,
   nil,   nil,  1026,  1681, 22994,   587,  1103,   nil,  3279,    34,
    33,   490,  1120,    32,   nil,  1407,  1551,   nil,   nil, 24745,
   nil, 24843,   nil, 25151,   nil, 25265,   nil,   nil,   nil,   nil,
  1076,  1080,  2703,   nil, 13207, 13076, 25556,   nil,   nil,   nil,
   nil,  4863,   nil,  1100, 25458, 25360,  1111,   nil,   nil,   nil,
   nil,   nil,  1113,   nil,   nil,  1116,  1118,  1120,  1123,   nil,
  1127,   nil,   152,   nil,   nil,   nil,   841, 26641,   nil,  1264,
 12147, 26702, 26763,   208,  1166,  1290,  1167,  1169,  1171,  1172,
  2152,  2257,   679,  3711,   nil,   nil,   nil,  1335, 24938,  1217,
  1219, 25752,   nil, 27072,   nil, 21985,   nil, 24239,   nil, 24941,
   nil,   nil,   nil,  1969,  1287,  1288,   nil,  1257,   136,   142,
    26,   109,   nil,   nil, 18012,   nil,   nil,   nil,   nil,  1263,
   nil,   293,   nil,  1264,   nil,  1267,  1271,  1281,  1282,   nil,
   -10,  1283,   nil,   nil,   nil, 25657,   nil,   nil,   nil,   nil,
   nil,  1242,   nil ]

racc_action_default = [
    -1,  -711,    -4,  -711,    -2,  -696,    -5,  -711,    -8,  -711,
  -711,  -711,  -711,   -31,  -711,  -711,   -36,  -711,  -711,  -294,
   -48,  -698,  -711,   -55,   -59,   -60,   -61,   -65,  -271,  -271,
  -271,  -307,  -338,  -339,   -77,   -13,   -81,   -89,   -91,  -711,
  -596,  -597,  -711,  -711,  -711,  -711,  -711,  -711,  -229,  -711,
  -698,  -243,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,
  -293,  -684,  -296,  -300,  -710,  -674,  -315,  -317,  -711,  -711,
   -57,   -57,  -696,  -711,  -711,  -711,  -711,  -340,  -341,  -343,
  -536,  -537,  -538,  -539,  -560,  -542,  -543,  -562,  -564,  -547,
  -552,  -556,  -558,  -574,  -575,  -576,  -560,  -578,  -580,  -581,
  -582,  -583,  -682,  -585,  -586,  -683,  -588,  -589,  -590,  -591,
  -592,  -593,  -594,  -595,  -600,  -601,  1183,    -3,  -697,  -706,
  -707,  -708,    -7,  -711,  -711,  -711,  -711,  -711,    -9,    -4,
   -19,  -711,  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -130,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,
  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,
  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,
  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,
  -191,  -192,  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -200,
   -24,  -127,   -13,  -711,  -711,  -711,  -711,  -711,  -261,  -711,
  -711,  -694,  -695,  -711,  -711,  -698,  -699,   -52,  -711,  -596,
  -597,  -711,  -294,  -711,  -711,  -235,  -711,   -13,  -711,   -53,
  -212,  -213,  -711,  -711,  -711,  -711,  -711,  -711,  -711,  -711,
  -711,  -711,  -711,  -711,  -711,  -711,  -711,  -711,  -711,  -711,
  -711,  -711,  -244,  -245,  -246,  -247,  -711,  -407,  -409,  -711,
  -692,  -693,   -66,  -261,  -711,  -314,  -413,  -422,  -424,   -72,
  -419,   -73,  -698,   -74,  -250,  -266,  -275,  -275,  -270,  -711,
  -276,  -711,  -560,  -676,  -711,  -711,   -75,   -76,  -696,   -14,
  -711,   -17,  -711,   -79,   -13,  -698,  -711,   -82,   -85,   -13,
   -97,   -98,  -711,  -711,  -105,  -307,  -310,  -698,  -711,  -338,
  -339,  -342,  -420,  -711,   -87,  -711,   -93,  -304,  -711,  -214,
  -215,  -579,  -223,  -224,  -711,  -236,  -711,   -13,  -298,  -698,
  -251,  -703,  -703,  -711,  -711,  -703,  -711,  -316,  -398,   -56,
  -711,  -711,  -711,   -13,   -13,  -696,  -711,  -697,  -596,  -597,
  -711,  -711,  -294,  -711,  -353,  -354,  -115,  -116,  -711,  -118,
  -711,  -294,  -604,  -711,  -596,  -597,  -331,  -120,  -121,  -160,
  -161,  -162,  -178,  -183,  -190,  -193,  -333,  -711,  -672,  -711,
  -540,  -711,  -711,  -711,  -711,  -711,  -711,  -711,  -711,    -6,
  -709,   -25,   -26,   -27,   -28,   -29,  -711,  -711,   -21,   -22,
   -23,  -128,  -711,   -32,   -35,  -281,  -711,  -711,  -280,   -33,
  -711,   -37,  -711,  -294,   -45,   -47,  -201,  -255,  -276,   -49,
   -50,   -38,  -202,  -255,  -698,  -262,  -275,  -275,  -685,  -686,
  -271,  -417,  -687,  -688,  -686,  -685,  -271,  -416,  -418,  -687,
  -688,   -44,  -209,   -51,  -698,  -313,  -711,  -711,  -711,  -261,
  -304,  -711,  -711,  -711,  -711,  -210,  -211,  -216,  -217,  -218,
  -219,  -220,  -221,  -225,  -226,  -227,  -228,  -230,  -231,  -232,
  -233,  -234,  -237,  -238,  -239,  -240,  -698,  -248,  -428,  -271,
  -685,  -686,   -63,   -67,  -631,  -698,  -698,  -272,  -426,  -428,
  -698,  -309,  -267,  -711,  -268,  -711,  -273,  -711,  -277,  -711,
  -679,  -681,   -12,  -697,   -16,   -18,  -698,   -78,  -302,   -94,
   -83,  -711,  -698,  -261,  -711,  -711,  -104,  -711,  -579,  -711,
   -90,   -95,  -711,  -711,  -711,  -711,  -249,  -241,  -711,  -528,
  -711,  -698,  -711,  -252,  -705,  -704,  -254,  -705,  -305,  -306,
  -675,  -318,  -630,   -13,  -344,  -345,   -13,  -711,  -711,  -711,
  -711,  -711,  -711,  -261,  -711,  -711,  -304,   -57,  -115,  -116,
  -117,  -711,  -711,  -261,  -327,  -602,  -711,   -13,  -607,  -335,
  -698,  -541,  -561,  -566,  -711,  -568,  -544,  -563,  -711,  -565,
  -546,  -711,  -549,  -711,  -551,  -554,  -711,  -555,  -711,  -577,
   -10,   -20,  -711,   -30,  -711,  -284,  -711,  -711,  -261,  -711,
  -711,  -711,  -711,  -421,  -711,  -263,  -265,  -711,  -711,   -68,
  -260,  -414,  -711,  -711,   -70,  -415,  -312,  -700,  -685,  -686,
  -685,  -686,  -698,   -54,  -447,  -449,  -451,  -454,  -508,  -461,
  -464,  -467,  -501,  -506,  -507,  -711,  -711,  -511,  -512,  -513,
  -514,  -515,  -516,  -517,  -518,  -519,  -520,  -522,  -711,  -711,
  -526,  -711,  -711,  -429,   -62,  -410,  -426,  -257,  -258,  -711,
  -388,  -711,  -308,  -275,  -274,  -278,  -711,  -677,  -678,  -711,
   -15,   -80,  -711,   -86,   -92,  -698,  -685,  -686,  -259,  -689,
  -103,  -711,   -88,  -711,  -208,  -222,  -698,  -710,  -710,  -297,
  -299,  -301,  -703,  -399,  -630,  -402,  -671,  -671,  -671,  -613,
  -615,  -615,  -615,  -629,  -632,  -633,  -634,  -635,  -636,  -637,
  -638,  -639,  -711,  -641,  -643,  -645,  -650,  -652,  -653,  -656,
  -661,  -663,  -664,  -666,  -667,  -668,  -711,  -710,  -346,  -710,
   -58,  -347,  -348,  -321,  -322,  -711,  -711,  -434,  -324,  -711,
  -698,  -685,  -686,  -689,  -303,   -13,  -115,  -116,  -119,  -698,
   -13,  -711,  -329,  -711,   -13,  -630,  -630,  -711,  -673,  -567,
  -570,  -571,  -572,  -573,   -13,  -545,  -548,  -550,  -553,  -557,
  -559,  -129,   -34,  -282,  -711,  -698,  -685,  -686,  -686,  -685,
   -46,  -256,  -711,  -701,  -275,   -40,  -204,   -41,  -205,   -69,
   -42,  -207,   -43,  -206,   -71,  -711,  -711,  -711,  -711,  -421,
  -711,  -711,  -452,  -453,  -711,  -711,  -711,  -711,  -463,  -711,
  -466,  -711,  -711,  -504,  -505,  -509,  -510,  -398,  -523,  -116,
  -524,  -711,  -408,  -388,  -412,  -411,  -711,  -423,  -389,  -698,
   -13,  -425,  -269,  -279,  -680,   -84,  -421,   -96,  -311,  -710,
  -351,   -13,  -529,  -710,  -530,  -531,  -253,  -711,  -698,  -711,
  -610,  -611,  -711,  -612,  -711,  -622,  -711,  -625,  -711,  -627,
  -711,  -355,  -711,  -357,  -359,  -362,  -365,  -698,  -644,  -654,
  -655,  -665,  -669,  -711,  -349,  -711,  -711,  -323,  -325,  -711,
  -711,   -13,  -421,  -711,  -421,  -711,  -711,   -13,  -332,  -711,
  -698,  -698,  -631,  -711,  -336,  -711,  -283,  -421,   -39,  -203,
  -264,  -711,  -448,  -450,  -457,  -460,  -469,  -698,  -698,  -470,
  -476,  -711,  -481,  -487,  -489,  -491,  -492,  -495,  -496,  -560,
  -499,  -698,  -698,  -525,  -698,  -698,  -560,  -702,  -698,  -502,
  -503,  -521,  -242,   -13,   -64,  -671,  -671,  -671,  -370,  -372,
  -372,  -372,  -387,  -711,  -698,  -392,  -639,  -647,  -648,  -659,
  -427,   -11,   -13,  -535,  -352,  -711,  -711,  -533,  -400,  -403,
  -405,  -711,  -671,  -651,  -656,  -670,  -614,  -615,  -615,  -642,
  -615,  -615,  -662,  -615,  -639,  -657,  -698,  -711,  -711,  -364,
  -640,  -319,  -711,  -320,  -711,  -439,  -442,  -445,  -446,  -278,
  -710,  -326,  -328,  -603,  -711,  -334,  -605,  -606,  -608,  -607,
  -569,  -455,  -456,  -485,  -471,  -474,  -477,  -479,  -711,  -488,
  -494,  -711,  -498,  -500,  -458,  -459,  -462,  -465,  -711,  -468,
  -430,  -711,  -367,  -368,  -369,  -378,  -380,  -711,  -383,  -711,
  -385,  -390,  -711,  -711,  -711,  -646,  -711,  -534,   -13,  -596,
  -597,  -711,  -711,  -294,  -532,   -13,   -13,  -401,  -609,  -711,
  -618,  -711,  -620,  -711,  -623,  -711,  -626,  -628,  -356,  -358,
  -360,  -363,   -13,  -435,  -711,  -711,  -443,  -431,  -432,  -433,
  -330,   -13,  -478,  -472,  -711,  -711,  -482,  -483,  -486,  -490,
  -493,  -497,  -671,  -649,  -371,  -372,  -372,  -372,  -372,  -660,
  -372,  -391,  -698,  -394,  -396,  -397,  -658,  -711,  -304,  -528,
  -261,  -711,  -711,  -304,  -711,  -711,  -615,  -615,  -615,  -615,
  -711,  -711,  -710,   -13,  -440,  -441,  -444,  -711,  -711,  -475,
  -480,  -711,  -366,  -711,  -375,  -711,  -377,  -711,  -381,  -711,
  -384,  -386,  -393,  -711,  -303,  -689,  -527,  -698,  -685,  -686,
  -689,  -303,  -404,  -406,  -711,  -616,  -619,  -621,  -624,  -361,
  -350,  -710,  -337,  -473,  -484,  -372,  -372,  -372,  -372,  -395,
  -421,  -615,  -436,  -437,  -438,  -711,  -373,  -376,  -379,  -382,
  -617,  -372,  -374 ]

clist = [
'41,340,219,321,321,41,386,350,351,224,270,355,561,285,285,285,391,121',
'746,307,434,504,347,135,135,540,276,280,398,697,268,496,764,41,311,311',
'633,551,336,883,321,321,321,353,354,440,446,117,138,138,130,211,613',
'820,553,556,418,419,269,677,118,41,401,402,403,404,570,227,674,849,674',
'359,375,375,375,495,425,530,324,425,128,8,331,950,121,425,8,713,840',
'135,349,349,305,877,349,489,1069,272,279,281,982,677,431,286,286,286',
'1014,15,451,543,546,886,15,550,356,4,41,1071,122,303,917,931,1103,934',
'897,41,871,41,1105,493,662,669,760,283,296,297,341,348,979,953,15,671',
'338,339,1099,349,349,349,349,951,954,825,826,1086,306,591,593,541,971',
'337,860,861,863,372,376,287,287,287,15,387,677,504,1,574,978,1102,980',
'363,364,365,674,674,587,589,592,592,432,703,968,857,344,388,452,1055',
'1056,488,498,8,342,345,285,499,918,932,833,1087,405,935,8,1077,41,994',
'457,1172,889,1123,745,441,995,1129,1130,665,1169,15,509,997,705,912',
'1105,399,1069,913,15,450,15,41,814,429,430,713,1099,815,406,986,343',
'817,453,454,819,1159,809,943,721,822,1042,285,285,818,413,424,334,632',
'424,1163,285,763,2,1088,424,758,1089,1087,1087,683,1090,321,871,998',
'602,1095,989,692,666,440,446,417,417,827,853,930,930,557,321,982,930',
'965,524,390,41,836,713,713,41,846,392,527,311,41,531,979,121,393,533',
'394,740,1087,276,15,1164,420,280,395,420,311,396,685,397,542,420,939',
'940,412,769,774,974,41,761,464,961,979,512,977,15,680,564,1096,286,1097',
'1027,520,688,41,41,513,286,210,306,830,407,688,528,516,973,1093,930',
'750,522,121,892,1116,414,270,1078,515,349,759,497,894,858,514,767,777',
'1126,777,500,1009,916,916,303,916,688,871,871,303,938,576,578,560,688',
'1032,1033,1034,1070,907,721,15,609,842,287,15,785,580,952,979,15,577',
'287,,,579,135,,614,306,1160,,1058,,306,,452,915,432,,845,440,446,,620',
'900,903,285,15,1165,625,138,,601,895,,,,899,891,,441,,,15,15,,996,655',
'1081,677,721,721,,,425,856,450,558,559,661,674,799,,,425,425,804,,,425',
'425,,620,321,,,,,,930,,321,,,1020,,694,795,797,531,285,974,800,802,619',
',41,531,,933,624,941,,,311,,,441,901,871,871,,311,842,,,441,,1173,957',
',,,450,956,755,854,,,,285,1132,450,,1024,1025,41,1026,,41,285,,,664',
',696,,441,,721,,721,,,741,441,,,,,41,,,450,,,,,,450,1004,796,798,762',
',285,801,803,,,,,,,1146,,,41,,946,,,441,,41,,,,,,135,,,15,1174,614,835',
',450,972,,,614,821,,,1030,,,749,855,,673,,,138,17,781,655,655,,17,,916',
'321,,,424,,425,,1079,,15,,321,15,424,424,,531,,424,424,1048,834,,737',
'614,17,739,847,908,702,,311,,15,782,,,620,,,625,790,311,,,,,1072,904',
'1073,,896,,17,,,,,,,15,,,420,,,,15,,,,,,420,420,,,957,420,420,,957,',
'957,,957,956,,956,614,,,,,,1115,,,614,,794,,,,41,,,,17,41,721,,909,41',
',,1170,17,,17,1127,417,,41,614,796,798,803,801,,,135,,,349,,,963,,,',
'967,947,,,,,1092,,,,946,614,946,,946,,,,,655,,,655,655,,655,,,,,655',
'655,655,,992,,,955,957,,957,346,957,956,957,,,424,41,,,,,,,,955,,,41',
',17,,17,,,17,,,,15,1021,17,,,15,,,1028,15,957,455,,,893,,17,,,15,909',
',,,,,,655,,41,,,,905,,41,,420,946,,946,18,946,,946,,18,349,1003,,,,1147',
',,1008,,655,,614,614,228,614,821,321,655,,,501,,228,228,228,321,18,312',
'312,688,,17,946,41,955,17,,15,,,17,,,517,,,,375,15,,,960,41,,18,,1050',
',,228,228,,964,228,360,370,370,,17,,,415,428,,,,,,,947,,947,,947,17',
'17,654,,15,,948,,,,15,,,,,,,,1000,321,,1124,1125,,655,18,975,,,975,228',
'228,228,228,18,,18,,,,,,,1111,,,,,,,375,,,,41,,15,,,,,41,41,506,,508',
',,510,511,,,,,,15,,,41,1054,,,655,,,,,41,,1047,655,655,,947,,947,,947',
'1142,947,285,865,867,869,349,349,,,626,,,,,,,,,441,,18,228,422,228,228',
'422,228,,,450,41,422,228,228,450,655,947,,655,,,,,,614,18,,,,,667,668',
',,,672,,,,,,17,15,,,,,,,15,15,681,,,,,1109,684,1036,1038,1040,228,228',
'1114,654,654,15,,,,228,605,,,,15,700,,,975,1122,17,,948,17,948,,948',
'18,,,653,18,,,40,312,18,,,40,,,,,17,,,,,,,,312,,768,,15,,,,,,,,18,,',
'40,310,310,1161,17,,,17,,,,17,228,18,18,,,17,17,652,,,17,17,,,,,40,',
'675,,346,228,678,,,,358,374,374,374,,,,,,,,228,,,,948,,948,,948,,948',
',,,,,,,,,,,675,,,346,,1134,1136,1138,1140,,1141,,40,,,,,,428,,,40,,40',
'948,,,,,,,654,848,,654,654,,654,,,,,654,654,654,,,,228,,1060,1062,,1064',
'1066,,1067,,,,,,783,949,,,,,,,,675,346,653,653,1176,1177,1178,1179,',
',,,,17,651,,,,17,981,1182,983,17,,,,,,,,,18,17,,,40,,,654,312,,228,',
',,,,312,,,17,,,,,,228,,652,652,40,843,,,844,,,,654,,,18,,,18,,654,914',
',,,228,,852,,,,,,,,228,,,,18,,,17,,,,,,,,,,,17,878,,650,,,,,,1155,1156',
'1157,1158,18,40,,422,228,40,,18,,310,40,,,422,422,,,,422,422,990,,,',
',,310,17,,,,,,17,,,,,40,,,,,1006,1007,654,653,906,,653,653,1180,653',
',40,40,,653,653,653,1011,1012,,,,,,649,1098,,1100,,,651,651,,,,312,17',
',1029,,648,,,,,,312,1117,,1118,,1119,,,,17,,,,652,654,,652,652,,652',
',,654,654,652,652,652,,,,,,,,,653,,,,,1068,,,,985,,,,,,,,,,,,,,,,,,18',
',999,653,654,18,228,654,,18,,653,,1166,,1167,,1168,,18,650,650,346,',
',,,,,652,,,,17,1171,,,422,,,17,17,,,,,,,,,,,,,,1181,,17,,652,,,,40,',
',17,652,,,,310,,,,647,,,,310,,,,,,18,,,651,,,651,651,,651,,18,649,649',
'651,651,651,653,40,,,40,,17,,,,,648,648,,,31,,,,,31,,,,,40,,,228,,,',
',,18,31,,,,,18,,,,31,31,31,,31,,,,40,,,,652,,653,40,,,,,651,,653,653',
',,,,,,,,31,,,,,31,31,,650,31,18,650,650,,650,,,,651,650,650,650,,,1045',
',651,,,18,,,,1051,653,,,653,652,,,,,,,,652,652,,,,,,,310,31,,,,,31,31',
'31,31,31,310,31,,,,,,,,,,,,647,647,,,,,,649,650,,649,649,652,649,,652',
',,649,649,649,,,648,,,648,648,,648,,,,1106,648,648,648,18,650,651,,',
',,18,18,650,,,40,,,,,40,,,,40,,,18,,228,228,,,,40,,18,31,31,31,31,31',
'31,31,,,,,31,31,31,649,,,,,,,,,,,31,651,,228,,648,,,,651,651,,,,,,18',
',,649,,,,,,,,649,,,,,,,,648,31,31,40,,,650,,648,,31,,,,40,,,,651,,,651',
',,,,,,31,,,,31,,,647,,31,647,647,,647,,,,,647,647,647,,,,,,40,,,,,,40',
',,,650,31,,,,,,,650,650,,,,,,,31,31,31,649,,,,,,,,,,,,,,,,648,,31,,',
',,40,28,,,,,28,647,,,650,31,,650,374,,,,,40,,28,,1049,,,,,,,28,28,28',
',28,649,,647,,,,,,649,649,647,,,,,,648,,,,,,,,648,648,,28,,,,,28,28',
',,28,,,,,,,,,,31,,,,,,649,,,649,,,,,,,,,,,374,,648,,40,648,,,,,,40,40',
',,,28,,,,,28,28,28,28,28,,28,40,,,,,,31,647,,40,,,,,,,31,,,,,,,,,,,',
',,,31,,,,,,,,,,,,,,,31,,,31,,40,,,,,31,,,,,,,,,647,31,,,,31,,,647,647',
',,,,,,,28,28,28,28,28,28,28,,,,,28,28,28,,31,,,31,31,,,31,,,28,,,31',
'31,,,,31,31,647,,,647,,,,,,,,,,,,,,,,,,,,,,,28,28,,,,,,,,28,,,,,,,,',
',,,,,,,,,28,,,,28,,,,,28,,,,,,,,,,,,,,,,,,,,,19,,,,,19,,28,,,,,,,,,',
',,,,,28,28,28,,,,,,,,,19,314,314,,,,,,,,28,,,,,31,,,,,31,31,,,31,,28',
',19,,,,,,31,,,,362,371,371,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,19,,,,,,,,,19,,19,,28,,,,31,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,31,,,,,28,31,,,,,,31,,,28,,,,,,,,,,,,,,,28,,19,,423,,,423,',
',,,,423,,28,,,28,,,,,,,28,,19,31,,,,,,,28,,,,28,,,,,,,,31,,,,,,,,,,',
',,,,,,,,28,,,28,28,,,28,,,,,,28,28,,,,28,28,,,,,19,,,,19,,,,314,19,',
',,,,,,,,,,,,,,314,,,,,,,,,,,,19,,,,,,31,,,,,,,31,31,,19,19,,,,,,,,,',
',,,31,,31,31,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,,,31,',
',,,,,,,28,,235,,,28,28,,,28,,284,284,284,,,,,,28,,,,329,330,,332,333',
',335,,,,,,,,28,,,,,,,284,284,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'28,19,,,,,,,,314,,28,,,,,,314,,,,,,,,,,,,,,,,,,,,,,,,19,,,19,28,,,,',
',28,,,,,,28,,,,,,,,19,,,,,,,773,,,,,,,,,,,,,,,,,,,,19,,,423,,,,19,,',
',28,,423,423,,284,427,423,423,433,284,,,,,433,,,,28,,,,,,,,,235,,,,465',
'466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482',
'483,484,485,486,,,,,487,,,,,,,284,284,314,,,,,,,284,,,,314,,,284,,284',
',,284,284,,,,,,,,,,,,,,,,,,28,,,,,,,28,28,,,,,,,,,,,,,536,,537,28,,28',
'28,,,,,,28,,19,,,,,19,,,,19,,,,,,,,,,19,,,,,,,,28,,,,,,,,,,423,,,28',
',,,,,,,,,,,,,,,,,,,,,,,,,,,284,,,,,,,,,,,,,,,,,19,,,,,,,,,,,19,,,,,',
',,,,,,,,,284,,433,433,433,,,,,,,,,,,,,,,,,,,,,19,,,,,,19,,,,330,,,,',
',,,,284,,284,,284,,,,,,,,,,,,,,,,284,,,,,,,,,433,,,695,19,,,,,,,,284',
',,284,,,371,,,,,19,,,,1053,,,284,284,,,,,,,,,,284,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,284,433,284,,,,791,,,284,284,433,433,,,,433,433,,,,,,',
',,,,,,,371,,,,19,,,,,,,19,19,,,,,,,,,,,,,,,,19,,,,,,,,,19,,284,,,284',
',,,,,,,,,,,,,,,,,,284,,,,,,,,,,,,,,,,,,19,,,,,,,,,284,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,284,,,,,,,,433,,,,,,,,,',
',,,433,433,433,433,,,,,,,,,,,,,,,,,,,,,,,942,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,284,,,,,,,,,,,,,,,,,,,,284,,,,,,,,,,,,,,,,,,,,284,433',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,284' ]
        racc_goto_table = arr = ::Array.new(3992, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'63,78,33,74,74,63,66,19,19,35,33,19,103,42,42,42,187,107,104,59,31,85',
'98,67,67,10,82,82,187,12,147,83,108,63,63,63,37,100,35,102,74,74,74',
'39,39,46,46,5,69,69,17,17,32,175,101,101,24,24,45,224,7,63,19,19,19',
'19,64,22,86,13,86,63,63,63,63,31,20,61,60,20,9,8,72,134,107,20,8,210',
'136,67,26,26,56,122,26,46,120,47,47,47,220,224,28,79,79,79,180,23,28',
'80,80,13,23,80,5,2,63,123,6,55,164,164,140,164,115,63,121,63,141,48',
'150,49,114,54,54,54,79,113,216,138,23,150,8,112,221,26,26,26,26,135',
'132,189,189,181,11,200,200,111,138,110,128,128,128,65,65,81,81,81,23',
'109,224,85,1,106,135,139,135,105,23,21,86,86,201,201,201,201,71,142',
'143,145,97,96,71,148,149,151,153,8,81,81,42,154,166,166,157,180,8,166',
'8,158,63,159,33,160,161,162,103,82,163,181,181,84,140,23,187,165,146',
'168,141,6,120,170,23,67,23,63,171,26,26,210,221,172,2,122,77,176,26',
'26,177,123,32,136,215,178,138,42,42,32,22,22,75,31,22,181,42,10,3,183',
'22,64,184,180,180,61,185,74,121,166,70,134,121,61,51,46,46,79,79,191',
'192,188,188,19,74,220,188,193,33,196,63,49,210,210,63,32,197,35,63,63',
'59,216,107,198,33,199,40,180,82,23,180,23,82,202,23,63,203,31,204,35',
'23,189,189,11,205,206,188,63,209,38,14,216,5,214,23,16,33,135,79,135',
'175,60,46,63,63,7,79,18,11,64,27,46,72,56,218,219,188,31,56,107,32,135',
'25,33,13,9,26,31,54,32,146,8,118,201,164,201,54,119,37,37,55,37,46,121',
'121,55,37,26,117,5,46,128,128,128,124,32,215,23,33,85,81,23,31,26,125',
'216,23,116,81,,,45,67,,35,11,102,,128,,11,,71,32,71,,61,46,46,,82,146',
'146,42,23,135,82,69,,17,10,,,,10,101,,82,,,23,23,,37,63,108,224,215',
'215,,,20,80,67,11,11,35,86,48,,,20,20,48,,,20,20,,82,74,,,,,,188,,74',
',,37,,71,28,28,59,42,188,28,28,47,,63,59,,64,47,100,,,63,,,82,83,121',
'121,,63,85,,,82,,13,217,,,,67,215,39,24,,,,42,128,67,,32,32,63,32,,63',
'42,,,47,,26,,82,,215,,215,,,107,82,,,,,63,,,67,,,,,,67,10,71,71,107',
',42,71,71,,,,,,,12,,,63,,127,,,82,,63,,,,,,67,,,23,104,35,98,,67,127',
',,35,35,,,10,,,79,78,,81,,,69,29,17,63,63,,29,,37,74,,,22,,20,,103,',
'23,,74,23,22,22,,59,,22,22,101,147,,11,35,29,11,59,28,81,,63,,23,8,',
',82,,,82,8,63,,,,,101,66,101,,19,,29,,,,,,,23,,,23,,,,23,,,,,,23,23',
',,217,23,23,,217,,217,,217,215,,215,35,,,,,,10,,,35,,81,,,,63,,,,29',
'63,215,,71,63,,,32,29,,29,10,79,,63,35,71,71,71,71,,,67,,,26,,,78,,',
',78,129,,,,,127,,,,127,35,127,,127,,,,,63,,,63,63,,63,,,,,63,63,63,',
'19,,,35,217,,217,76,217,215,217,,,22,63,,,,,,,,35,,,63,,29,,29,,,29',
',,,23,187,29,,,23,,,187,23,217,57,,,11,,29,,,23,71,,,,,,,63,,63,,,,11',
',63,,23,127,,127,30,127,,127,,30,26,107,,,,31,,,107,,63,,35,35,30,35',
'35,74,63,,,57,,30,30,30,74,30,30,30,46,,29,127,63,35,29,,23,,,29,,,57',
',,,63,23,,,11,63,,30,,63,,,30,30,,11,30,30,30,30,,29,,,76,76,,,,,,,129',
',129,,129,29,29,95,,23,,130,,,,23,,,,,,,,11,74,,19,19,,63,30,130,,,130',
'30,30,30,30,30,,30,,,,,,,33,,,,,,,63,,,,63,,23,,,,,63,63,76,,76,,,76',
'76,,,,,,23,,,63,23,,,63,,,,,63,,11,63,63,,129,,129,,129,35,129,42,213',
'213,213,26,26,,,57,,,,,,,,,82,,30,30,30,30,30,30,30,,,67,63,30,30,30',
'67,63,129,,63,,,,,,35,30,,,,,57,57,,,,57,,,,,,29,23,,,,,,,23,23,57,',
',,,11,57,131,131,131,30,30,11,95,95,23,,,,30,76,,,,23,57,,,130,11,29',
',130,29,130,,130,30,,,94,30,,,62,30,30,,,62,,,,,29,,,,,,,,30,,57,,23',
',,,,,,,30,,,62,62,62,11,29,,,29,,,,29,30,30,30,,,29,29,93,,,29,29,,',
',,62,,76,,76,30,76,,,,62,62,62,62,,,,,,,,30,,,,130,,130,,130,,130,,',
',,,,,,,,,76,,,76,,131,131,131,131,,131,,62,,,,,,76,,,62,,62,130,,,,',
',,95,57,,95,95,,95,,,,,95,95,95,,,,30,,213,213,,213,213,,213,,,,,,76',
'133,,,,,,,,76,76,94,94,131,131,131,131,,,,,,29,92,,,,29,133,131,133',
'29,,,,,,,,,30,29,,,62,,,95,30,,30,,,,,,30,,,29,,,,,,30,,93,93,62,76',
',,76,,,,95,,,30,,,30,,95,57,,,,30,,76,,,,,,,,30,,,,30,,,29,,,,,,,,,',
',29,76,,91,,,,,,213,213,213,213,30,62,,30,30,62,,30,,62,62,,,30,30,',
',,30,30,57,,,,,,62,29,,,,,,29,,,,,62,,,,,57,57,95,94,76,,94,94,213,94',
',62,62,,94,94,94,57,57,,,,,,90,133,,133,,,92,92,,,,30,29,,57,,89,,,',
',,30,133,,133,,133,,,,29,,,,93,95,,93,93,,93,,,95,95,93,93,93,,,,,,',
',,94,,,,,57,,,,76,,,,,,,,,,,,,,,,,,30,,76,94,95,30,30,95,,30,,94,,133',
',133,,133,,30,91,91,76,,,,,,,93,,,,29,133,,,30,,,29,29,,,,,,,,,,,,,',
'133,,29,,93,,,,62,,,29,93,,,,62,,,,88,,,,62,,,,,,30,,,92,,,92,92,,92',
',30,90,90,92,92,92,94,62,,,62,,29,,,,,89,89,,,53,,,,,53,,,,,62,,,30',
',,,,,30,53,,,,,30,,,,53,53,53,,53,,,,62,,,,93,,94,62,,,,,92,,94,94,',
',,,,,,,53,,,,,53,53,,91,53,30,91,91,,91,,,,92,91,91,91,,,30,,92,,,30',
',,,30,94,,,94,93,,,,,,,,93,93,,,,,,,62,53,,,,,53,53,53,53,53,62,53,',
',,,,,,,,,,88,88,,,,,,90,91,,90,90,93,90,,93,,,90,90,90,,,89,,,89,89',
',89,,,,30,89,89,89,30,91,92,,,,,30,30,91,,,62,,,,,62,,,,62,,,30,,30',
'30,,,,62,,30,53,53,53,53,53,53,53,,,,,53,53,53,90,,,,,,,,,,,53,92,,30',
',89,,,,92,92,,,,,,30,,,90,,,,,,,,90,,,,,,,,89,53,53,62,,,91,,89,,53',
',,,62,,,,92,,,92,,,,,,,53,,,,53,,,88,,53,88,88,,88,,,,,88,88,88,,,,',
',62,,,,,,62,,,,91,53,,,,,,,91,91,,,,,,,53,53,53,90,,,,,,,,,,,,,,,,89',
',53,,,,,62,50,,,,,50,88,,,91,53,,91,62,,,,,62,,50,,62,,,,,,,50,50,50',
',50,90,,88,,,,,,90,90,88,,,,,,89,,,,,,,,89,89,,50,,,,,50,50,,,50,,,',
',,,,,,53,,,,,,90,,,90,,,,,,,,,,,62,,89,,62,89,,,,,,62,62,,,,50,,,,,50',
'50,50,50,50,,50,62,,,,,,53,88,,62,,,,,,,53,,,,,,,,,,,,,,,53,,,,,,,,',
',,,,,,53,,,53,,62,,,,,53,,,,,,,,,88,53,,,,53,,,88,88,,,,,,,,50,50,50',
'50,50,50,50,,,,,50,50,50,,53,,,53,53,,,53,,,50,,,53,53,,,,53,53,88,',
',88,,,,,,,,,,,,,,,,,,,,,,,50,50,,,,,,,,50,,,,,,,,,,,,,,,,,,50,,,,50',
',,,,50,,,,,,,,,,,,,,,,,,,,,34,,,,,34,,50,,,,,,,,,,,,,,,50,50,50,,,,',
',,,,34,34,34,,,,,,,,50,,,,,53,,,,,53,53,,,53,,50,,34,,,,,,53,,,,34,34',
'34,,,,,,,,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,34,,34,,50',
',,,53,,,,,,,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,50,53,,,',
',,53,,,50,,,,,,,,,,,,,,,50,,34,,34,,,34,,,,,,34,,50,,,50,,,,,,,50,,34',
'53,,,,,,,50,,,,50,,,,,,,,53,,,,,,,,,,,,,,,,,,,50,,,50,50,,,50,,,,,,50',
'50,,,,50,50,,,,,34,,,,34,,,,34,34,,,,,,,,,,,,,,,,34,,,,,,,,,,,,34,,',
',,,53,,,,,,,53,53,,34,34,,,,,,,,,,,,,53,,53,53,,,,,,53,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,53,,,,,,,,,,,,,53,,,,,,,,,50,,36,,,50,50,,,50,,36,36',
'36,,,,,,50,,,,36,36,,36,36,,36,,,,,,,,50,,,,,,,36,36,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,50,34,,,,,,,,34,,50,,,,,,34,,,,,,,,,,,,,,,,',
',,,,,,,34,,,34,50,,,,,,50,,,,,,50,,,,,,,,34,,,,,,,34,,,,,,,,,,,,,,,',
',,,,34,,,34,,,,34,,,,50,,34,34,,36,36,34,34,36,36,,,,,36,,,,50,,,,,',
',,,36,,,,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36',
'36,36,,,,,36,,,,,,,36,36,34,,,,,,,36,,,,34,,,36,,36,,,36,36,,,,,,,,',
',,,,,,,,,50,,,,,,,50,50,,,,,,,,,,,,,36,,36,50,,50,50,,,,,,50,,34,,,',
',34,,,,34,,,,,,,,,,34,,,,,,,,50,,,,,,,,,,34,,,50,,,,,,,,,,,,,,,,,,,',
',,,,,,,,36,,,,,,,,,,,,,,,,,34,,,,,,,,,,,34,,,,,,,,,,,,,,,36,,36,36,36',
',,,,,,,,,,,,,,,,,,,,34,,,,,,34,,,,36,,,,,,,,,36,,36,,36,,,,,,,,,,,,',
',,,36,,,,,,,,,36,,,36,34,,,,,,,,36,,,36,,,34,,,,,34,,,,34,,,36,36,,',
',,,,,,,36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,36,36,,,,36,,,36,36,36',
'36,,,,36,36,,,,,,,,,,,,,,34,,,,34,,,,,,,34,34,,,,,,,,,,,,,,,,34,,,,',
',,,,34,,36,,,36,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,34,,,,,,,,,36',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,',
'36,,,,,,,,,,,,,36,36,36,36,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,36',
'36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36' ]
        racc_goto_check = arr = ::Array.new(3992, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   172,   113,   266,   nil,    42,   111,    55,    79,    71,
  -312,   119,  -510,  -628,  -511,   nil,  -170,    40,   344,   -61,
  -138,   106,    45,   105,  -157,   157,    22,   228,  -115,   639,
   899,  -198,  -382,   -16,  2474,   -12,  2881,  -428,    98,   -27,
  -243,   nil,   -18,   nil,   nil,    32,  -174,    69,  -143,  -367,
  2146,  -210,   nil,  1769,   102,    84,    57,   646,   nil,   -17,
    41,  -248,  1204,    -2,  -302,    89,   -70,    13,   nil,    38,
  -133,   -31,    37,   nil,   -33,   212,   766,   180,   -63,    72,
  -232,   134,    -2,  -242,  -268,  -266,  -435,   nil,  1265,  1122,
  1106,  1029,   931,   794,   738,   530,   115,   125,   -44,   nil,
  -311,  -296,  -698,  -344,  -542,   104,  -199,    12,  -546,    93,
    97,  -181,    80,    70,  -442,  -638,    39,    10,  -199,  -519,
  -891,  -596,  -629,  -871,  -585,  -427,   nil,  -235,  -546,   -48,
   159,   220,  -689,   534,  -756,  -690,  -582,   nil,  -700,  -868,
  -921,  -915,  -365,  -669,   nil,  -514,  -326,     6,  -776,  -776,
  -358,   -72,   nil,   -81,   -77,   nil,   nil,  -459,  -791,  -678,
  -948,  -533,  -858,  -671,  -694,  -664,  -612,   nil,  -583,   nil,
  -580,  -402,  -397,   nil,   nil,  -587,  -394,  -392,  -388,   nil,
  -813,  -865,   nil,  -752,  -749,  -745,   nil,   -68,  -525,  -494,
   nil,  -369,  -410,  -558,   nil,   nil,   215,   217,   223,   224,
  -239,  -210,   231,   233,   234,  -252,  -252,   nil,   nil,  -239,
  -465,   nil,   nil,   383,  -523,  -300,  -726,  -305,  -497,  -668,
  -766,  -893,   nil,   nil,  -446 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,     6,   357,   301,   nil,
   nil,   539,   nil,   884,   nil,   298,   299,   nil,   nil,   nil,
    13,    14,    20,   233,   nil,   nil,    16,   nil,   421,   234,
   328,   nil,   nil,   572,   232,   456,    23,  1013,   nil,   nil,
   nil,   352,    24,    25,    26,   nil,   691,   nil,   nil,   nil,
   318,   nil,    27,   315,   435,    34,   nil,   nil,    36,    39,
    38,   nil,   229,   230,   369,   nil,   137,   443,   136,    81,
   nil,   426,    97,    48,    51,   266,   290,   nil,   850,   436,
   nil,   437,   448,   nil,   621,   502,   288,   274,    52,    53,
    54,    55,    56,    57,    58,    59,    60,   nil,   275,    66,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   554,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   873,   720,   nil,   874,   875,  1094,   945,   707,   nil,   708,
   709,   nil,   nil,   710,   nil,   712,   nil,   838,   nil,   nil,
   nil,   718,   nil,   nil,   552,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   447,   nil,   nil,   670,   663,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   920,   nil,   634,   643,   635,
   636,   nil,   nil,   637,   638,   nil,   nil,   nil,   nil,   919,
   921,   nil,   923,   924,   925,   926,   927,   nil,   729,   642,
   644,   nil,   nil,   nil,    80,    82,    83,   nil,   nil,   nil,
   nil,   582,   nil,   nil,   nil,   nil,   nil,    93,    94,   nil,
   976,   766,   706,   nil,   711,   984,   723,   725,   726,   958,
   730,   959,   733,   736,   293 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  0, 151, :_reduce_4,
  1, 151, :_reduce_5,
  3, 151, :_reduce_6,
  2, 151, :_reduce_7,
  1, 153, :_reduce_none,
  2, 153, :_reduce_9,
  3, 156, :_reduce_10,
  4, 157, :_reduce_11,
  2, 158, :_reduce_12,
  0, 162, :_reduce_13,
  1, 162, :_reduce_14,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  1, 163, :_reduce_none,
  2, 163, :_reduce_18,
  0, 174, :_reduce_19,
  4, 155, :_reduce_20,
  3, 155, :_reduce_21,
  3, 155, :_reduce_22,
  3, 155, :_reduce_23,
  2, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  3, 155, :_reduce_28,
  3, 155, :_reduce_29,
  4, 155, :_reduce_30,
  1, 155, :_reduce_none,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  5, 155, :_reduce_34,
  3, 155, :_reduce_35,
  1, 155, :_reduce_none,
  3, 167, :_reduce_37,
  3, 167, :_reduce_38,
  6, 167, :_reduce_39,
  5, 167, :_reduce_40,
  5, 167, :_reduce_41,
  5, 167, :_reduce_42,
  5, 167, :_reduce_43,
  3, 167, :_reduce_44,
  1, 175, :_reduce_none,
  3, 175, :_reduce_46,
  1, 175, :_reduce_none,
  1, 173, :_reduce_none,
  3, 173, :_reduce_49,
  3, 173, :_reduce_50,
  3, 173, :_reduce_51,
  2, 173, :_reduce_52,
  0, 185, :_reduce_53,
  4, 173, :_reduce_54,
  1, 173, :_reduce_none,
  1, 166, :_reduce_none,
  0, 188, :_reduce_57,
  3, 186, :_reduce_58,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 190, :_reduce_none,
  4, 190, :_reduce_62,
  0, 198, :_reduce_63,
  4, 195, :_reduce_64,
  1, 197, :_reduce_none,
  2, 189, :_reduce_66,
  3, 189, :_reduce_67,
  4, 189, :_reduce_68,
  5, 189, :_reduce_69,
  4, 189, :_reduce_70,
  5, 189, :_reduce_71,
  2, 189, :_reduce_72,
  2, 189, :_reduce_73,
  2, 189, :_reduce_74,
  2, 189, :_reduce_75,
  2, 189, :_reduce_76,
  1, 168, :_reduce_77,
  3, 168, :_reduce_78,
  1, 203, :_reduce_79,
  3, 203, :_reduce_80,
  1, 202, :_reduce_none,
  2, 202, :_reduce_82,
  3, 202, :_reduce_83,
  5, 202, :_reduce_84,
  2, 202, :_reduce_85,
  4, 202, :_reduce_86,
  2, 202, :_reduce_87,
  4, 202, :_reduce_88,
  1, 202, :_reduce_89,
  3, 202, :_reduce_90,
  1, 206, :_reduce_none,
  3, 206, :_reduce_92,
  2, 205, :_reduce_93,
  3, 205, :_reduce_94,
  1, 208, :_reduce_95,
  3, 208, :_reduce_96,
  1, 207, :_reduce_97,
  1, 207, :_reduce_98,
  4, 207, :_reduce_99,
  3, 207, :_reduce_100,
  3, 207, :_reduce_101,
  3, 207, :_reduce_102,
  3, 207, :_reduce_103,
  2, 207, :_reduce_104,
  1, 207, :_reduce_105,
  1, 170, :_reduce_106,
  1, 170, :_reduce_107,
  4, 170, :_reduce_108,
  3, 170, :_reduce_109,
  3, 170, :_reduce_110,
  3, 170, :_reduce_111,
  3, 170, :_reduce_112,
  2, 170, :_reduce_113,
  1, 170, :_reduce_114,
  1, 211, :_reduce_115,
  1, 211, :_reduce_none,
  2, 212, :_reduce_117,
  1, 212, :_reduce_118,
  3, 212, :_reduce_119,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 164, :_reduce_125,
  1, 164, :_reduce_none,
  1, 165, :_reduce_127,
  0, 217, :_reduce_128,
  4, 165, :_reduce_129,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  3, 183, :_reduce_201,
  3, 183, :_reduce_202,
  6, 183, :_reduce_203,
  5, 183, :_reduce_204,
  5, 183, :_reduce_205,
  5, 183, :_reduce_206,
  5, 183, :_reduce_207,
  4, 183, :_reduce_208,
  3, 183, :_reduce_209,
  3, 183, :_reduce_210,
  3, 183, :_reduce_211,
  2, 183, :_reduce_212,
  2, 183, :_reduce_213,
  2, 183, :_reduce_214,
  2, 183, :_reduce_215,
  3, 183, :_reduce_216,
  3, 183, :_reduce_217,
  3, 183, :_reduce_218,
  3, 183, :_reduce_219,
  3, 183, :_reduce_220,
  3, 183, :_reduce_221,
  4, 183, :_reduce_222,
  2, 183, :_reduce_223,
  2, 183, :_reduce_224,
  3, 183, :_reduce_225,
  3, 183, :_reduce_226,
  3, 183, :_reduce_227,
  3, 183, :_reduce_228,
  1, 183, :_reduce_none,
  3, 183, :_reduce_230,
  3, 183, :_reduce_231,
  3, 183, :_reduce_232,
  3, 183, :_reduce_233,
  3, 183, :_reduce_234,
  2, 183, :_reduce_235,
  2, 183, :_reduce_236,
  3, 183, :_reduce_237,
  3, 183, :_reduce_238,
  3, 183, :_reduce_239,
  3, 183, :_reduce_240,
  3, 183, :_reduce_241,
  6, 183, :_reduce_242,
  1, 183, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  3, 220, :_reduce_248,
  3, 220, :_reduce_249,
  1, 223, :_reduce_none,
  1, 224, :_reduce_none,
  2, 224, :_reduce_none,
  4, 224, :_reduce_253,
  2, 224, :_reduce_254,
  1, 218, :_reduce_none,
  3, 218, :_reduce_256,
  3, 229, :_reduce_257,
  3, 229, :_reduce_258,
  0, 231, :_reduce_259,
  1, 231, :_reduce_none,
  0, 178, :_reduce_261,
  1, 178, :_reduce_none,
  2, 178, :_reduce_none,
  4, 178, :_reduce_264,
  2, 178, :_reduce_265,
  1, 201, :_reduce_266,
  2, 201, :_reduce_267,
  2, 201, :_reduce_268,
  4, 201, :_reduce_269,
  1, 201, :_reduce_270,
  0, 234, :_reduce_271,
  2, 194, :_reduce_272,
  2, 233, :_reduce_273,
  2, 232, :_reduce_274,
  0, 232, :_reduce_275,
  1, 226, :_reduce_276,
  2, 226, :_reduce_277,
  3, 226, :_reduce_278,
  4, 226, :_reduce_279,
  1, 172, :_reduce_280,
  1, 172, :_reduce_none,
  3, 171, :_reduce_282,
  4, 171, :_reduce_283,
  2, 171, :_reduce_284,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_295,
  0, 257, :_reduce_296,
  4, 221, :_reduce_297,
  0, 258, :_reduce_298,
  4, 221, :_reduce_299,
  0, 259, :_reduce_300,
  4, 221, :_reduce_301,
  3, 221, :_reduce_302,
  3, 221, :_reduce_303,
  2, 221, :_reduce_304,
  3, 221, :_reduce_305,
  3, 221, :_reduce_306,
  1, 221, :_reduce_307,
  4, 221, :_reduce_308,
  3, 221, :_reduce_309,
  1, 221, :_reduce_310,
  5, 221, :_reduce_311,
  4, 221, :_reduce_312,
  3, 221, :_reduce_313,
  2, 221, :_reduce_314,
  1, 221, :_reduce_none,
  2, 221, :_reduce_316,
  0, 260, :_reduce_317,
  3, 221, :_reduce_318,
  6, 221, :_reduce_319,
  6, 221, :_reduce_320,
  4, 221, :_reduce_321,
  4, 221, :_reduce_322,
  5, 221, :_reduce_323,
  4, 221, :_reduce_324,
  5, 221, :_reduce_325,
  6, 221, :_reduce_326,
  0, 261, :_reduce_327,
  6, 221, :_reduce_328,
  0, 262, :_reduce_329,
  7, 221, :_reduce_330,
  0, 263, :_reduce_331,
  5, 221, :_reduce_332,
  0, 264, :_reduce_333,
  6, 221, :_reduce_334,
  0, 265, :_reduce_335,
  0, 266, :_reduce_336,
  9, 221, :_reduce_337,
  1, 221, :_reduce_338,
  1, 221, :_reduce_339,
  1, 221, :_reduce_340,
  1, 221, :_reduce_341,
  1, 177, :_reduce_none,
  1, 200, :_reduce_343,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  2, 248, :_reduce_346,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 249, :_reduce_none,
  5, 249, :_reduce_350,
  1, 160, :_reduce_none,
  2, 160, :_reduce_352,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  1, 267, :_reduce_355,
  3, 267, :_reduce_356,
  1, 270, :_reduce_357,
  3, 270, :_reduce_358,
  1, 269, :_reduce_none,
  3, 269, :_reduce_360,
  5, 269, :_reduce_361,
  1, 269, :_reduce_362,
  3, 269, :_reduce_363,
  2, 271, :_reduce_364,
  1, 271, :_reduce_365,
  4, 272, :_reduce_366,
  2, 272, :_reduce_367,
  2, 272, :_reduce_368,
  2, 272, :_reduce_369,
  1, 272, :_reduce_370,
  2, 278, :_reduce_371,
  0, 278, :_reduce_372,
  6, 279, :_reduce_373,
  8, 279, :_reduce_374,
  4, 279, :_reduce_375,
  6, 279, :_reduce_376,
  4, 279, :_reduce_377,
  2, 279, :_reduce_none,
  6, 279, :_reduce_379,
  2, 279, :_reduce_380,
  4, 279, :_reduce_381,
  6, 279, :_reduce_382,
  2, 279, :_reduce_383,
  4, 279, :_reduce_384,
  2, 279, :_reduce_385,
  4, 279, :_reduce_386,
  1, 279, :_reduce_none,
  0, 283, :_reduce_388,
  1, 283, :_reduce_389,
  3, 284, :_reduce_390,
  4, 284, :_reduce_391,
  1, 285, :_reduce_392,
  4, 285, :_reduce_393,
  1, 286, :_reduce_394,
  3, 286, :_reduce_395,
  1, 287, :_reduce_396,
  1, 287, :_reduce_none,
  0, 291, :_reduce_398,
  0, 292, :_reduce_399,
  4, 247, :_reduce_400,
  4, 289, :_reduce_401,
  1, 289, :_reduce_402,
  0, 295, :_reduce_403,
  4, 290, :_reduce_404,
  0, 296, :_reduce_405,
  4, 290, :_reduce_406,
  0, 298, :_reduce_407,
  4, 294, :_reduce_408,
  2, 191, :_reduce_409,
  4, 191, :_reduce_410,
  5, 191, :_reduce_411,
  5, 191, :_reduce_412,
  2, 246, :_reduce_413,
  4, 246, :_reduce_414,
  4, 246, :_reduce_415,
  3, 246, :_reduce_416,
  3, 246, :_reduce_417,
  3, 246, :_reduce_418,
  2, 246, :_reduce_419,
  1, 246, :_reduce_420,
  4, 246, :_reduce_421,
  0, 300, :_reduce_422,
  4, 245, :_reduce_423,
  0, 301, :_reduce_424,
  4, 245, :_reduce_425,
  0, 302, :_reduce_426,
  3, 196, :_reduce_427,
  0, 303, :_reduce_428,
  0, 304, :_reduce_429,
  4, 297, :_reduce_430,
  5, 250, :_reduce_431,
  1, 305, :_reduce_432,
  1, 305, :_reduce_none,
  0, 308, :_reduce_434,
  0, 309, :_reduce_435,
  7, 251, :_reduce_436,
  1, 307, :_reduce_437,
  1, 307, :_reduce_none,
  1, 306, :_reduce_439,
  3, 306, :_reduce_440,
  3, 306, :_reduce_441,
  1, 310, :_reduce_none,
  2, 310, :_reduce_443,
  3, 310, :_reduce_444,
  1, 310, :_reduce_445,
  1, 310, :_reduce_446,
  1, 184, :_reduce_none,
  3, 314, :_reduce_448,
  1, 314, :_reduce_none,
  3, 316, :_reduce_450,
  1, 316, :_reduce_none,
  1, 318, :_reduce_452,
  1, 319, :_reduce_453,
  1, 317, :_reduce_none,
  4, 317, :_reduce_455,
  4, 317, :_reduce_456,
  3, 317, :_reduce_457,
  4, 317, :_reduce_458,
  4, 317, :_reduce_459,
  3, 317, :_reduce_460,
  0, 323, :_reduce_461,
  4, 317, :_reduce_462,
  2, 317, :_reduce_463,
  0, 324, :_reduce_464,
  4, 317, :_reduce_465,
  2, 317, :_reduce_466,
  0, 325, :_reduce_467,
  4, 317, :_reduce_468,
  1, 311, :_reduce_469,
  1, 311, :_reduce_470,
  2, 311, :_reduce_471,
  3, 311, :_reduce_472,
  5, 311, :_reduce_473,
  2, 311, :_reduce_474,
  4, 311, :_reduce_475,
  1, 311, :_reduce_none,
  2, 326, :_reduce_477,
  3, 326, :_reduce_478,
  2, 312, :_reduce_479,
  4, 312, :_reduce_480,
  1, 312, :_reduce_481,
  3, 312, :_reduce_482,
  1, 328, :_reduce_483,
  3, 328, :_reduce_484,
  1, 327, :_reduce_none,
  3, 313, :_reduce_486,
  1, 313, :_reduce_487,
  2, 313, :_reduce_488,
  1, 313, :_reduce_489,
  3, 313, :_reduce_490,
  1, 313, :_reduce_491,
  1, 329, :_reduce_492,
  3, 329, :_reduce_493,
  2, 332, :_reduce_494,
  1, 332, :_reduce_495,
  1, 333, :_reduce_496,
  3, 333, :_reduce_497,
  2, 330, :_reduce_498,
  1, 330, :_reduce_499,
  2, 331, :_reduce_500,
  1, 320, :_reduce_none,
  3, 320, :_reduce_502,
  3, 320, :_reduce_503,
  2, 320, :_reduce_504,
  2, 320, :_reduce_505,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  2, 320, :_reduce_509,
  2, 320, :_reduce_510,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_519,
  0, 338, :_reduce_520,
  3, 336, :_reduce_521,
  1, 315, :_reduce_522,
  2, 337, :_reduce_523,
  2, 321, :_reduce_524,
  3, 321, :_reduce_525,
  1, 321, :_reduce_526,
  6, 159, :_reduce_527,
  0, 159, :_reduce_528,
  1, 339, :_reduce_529,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 340, :_reduce_532,
  1, 340, :_reduce_none,
  2, 161, :_reduce_534,
  1, 161, :_reduce_none,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  1, 236, :_reduce_538,
  1, 342, :_reduce_539,
  2, 342, :_reduce_540,
  3, 343, :_reduce_541,
  1, 343, :_reduce_542,
  1, 343, :_reduce_543,
  3, 237, :_reduce_544,
  4, 238, :_reduce_545,
  3, 239, :_reduce_546,
  0, 346, :_reduce_547,
  3, 346, :_reduce_548,
  1, 347, :_reduce_549,
  2, 347, :_reduce_550,
  3, 241, :_reduce_551,
  0, 349, :_reduce_552,
  3, 349, :_reduce_553,
  3, 240, :_reduce_554,
  3, 242, :_reduce_555,
  0, 350, :_reduce_556,
  3, 350, :_reduce_557,
  0, 351, :_reduce_558,
  3, 351, :_reduce_559,
  0, 334, :_reduce_560,
  2, 334, :_reduce_561,
  0, 344, :_reduce_562,
  2, 344, :_reduce_563,
  0, 345, :_reduce_564,
  2, 345, :_reduce_565,
  1, 348, :_reduce_566,
  2, 348, :_reduce_567,
  0, 353, :_reduce_568,
  4, 348, :_reduce_569,
  1, 352, :_reduce_570,
  1, 352, :_reduce_571,
  1, 352, :_reduce_572,
  1, 352, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 354, :_reduce_576,
  3, 355, :_reduce_577,
  1, 341, :_reduce_578,
  2, 341, :_reduce_579,
  1, 219, :_reduce_580,
  1, 219, :_reduce_581,
  1, 219, :_reduce_582,
  1, 219, :_reduce_583,
  1, 209, :_reduce_584,
  1, 209, :_reduce_585,
  1, 209, :_reduce_586,
  1, 209, :_reduce_587,
  1, 209, :_reduce_588,
  1, 210, :_reduce_589,
  1, 210, :_reduce_590,
  1, 210, :_reduce_591,
  1, 210, :_reduce_592,
  1, 210, :_reduce_593,
  1, 210, :_reduce_594,
  1, 210, :_reduce_595,
  1, 243, :_reduce_596,
  1, 243, :_reduce_597,
  1, 176, :_reduce_598,
  1, 176, :_reduce_599,
  1, 181, :_reduce_600,
  1, 181, :_reduce_601,
  0, 356, :_reduce_602,
  4, 253, :_reduce_603,
  0, 253, :_reduce_604,
  3, 255, :_reduce_605,
  3, 255, :_reduce_606,
  0, 358, :_reduce_607,
  3, 255, :_reduce_608,
  4, 357, :_reduce_609,
  2, 357, :_reduce_610,
  2, 357, :_reduce_611,
  2, 357, :_reduce_612,
  1, 357, :_reduce_613,
  2, 360, :_reduce_614,
  0, 360, :_reduce_615,
  6, 293, :_reduce_616,
  8, 293, :_reduce_617,
  4, 293, :_reduce_618,
  6, 293, :_reduce_619,
  4, 293, :_reduce_620,
  6, 293, :_reduce_621,
  2, 293, :_reduce_622,
  4, 293, :_reduce_623,
  6, 293, :_reduce_624,
  2, 293, :_reduce_625,
  4, 293, :_reduce_626,
  2, 293, :_reduce_627,
  4, 293, :_reduce_628,
  1, 293, :_reduce_629,
  0, 293, :_reduce_630,
  1, 230, :_reduce_631,
  1, 288, :_reduce_632,
  1, 288, :_reduce_633,
  1, 288, :_reduce_634,
  1, 288, :_reduce_635,
  1, 268, :_reduce_none,
  1, 268, :_reduce_637,
  1, 362, :_reduce_638,
  1, 363, :_reduce_639,
  3, 363, :_reduce_640,
  1, 280, :_reduce_641,
  3, 280, :_reduce_642,
  1, 364, :_reduce_643,
  2, 365, :_reduce_644,
  1, 365, :_reduce_645,
  2, 366, :_reduce_646,
  1, 366, :_reduce_647,
  1, 273, :_reduce_648,
  3, 273, :_reduce_649,
  1, 359, :_reduce_650,
  3, 359, :_reduce_651,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 276, :_reduce_654,
  2, 274, :_reduce_655,
  1, 274, :_reduce_656,
  3, 367, :_reduce_657,
  3, 368, :_reduce_658,
  1, 281, :_reduce_659,
  3, 281, :_reduce_660,
  1, 361, :_reduce_661,
  3, 361, :_reduce_662,
  1, 369, :_reduce_none,
  1, 369, :_reduce_none,
  2, 282, :_reduce_665,
  1, 282, :_reduce_666,
  1, 370, :_reduce_none,
  1, 370, :_reduce_none,
  2, 277, :_reduce_669,
  2, 275, :_reduce_670,
  0, 275, :_reduce_671,
  1, 256, :_reduce_none,
  3, 256, :_reduce_673,
  0, 244, :_reduce_674,
  2, 244, :_reduce_none,
  1, 228, :_reduce_676,
  3, 228, :_reduce_677,
  3, 371, :_reduce_678,
  2, 371, :_reduce_679,
  4, 371, :_reduce_680,
  2, 371, :_reduce_681,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 180, :_reduce_694,
  1, 180, :_reduce_695,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  2, 204, :_reduce_700,
  2, 179, :_reduce_701,
  2, 322, :_reduce_702,
  0, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 254, :_reduce_706,
  1, 254, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_none,
  0, 225, :_reduce_710 ]

racc_reduce_n = 711

racc_shift_n = 1183

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@2",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "p_expr",
  "@3",
  "expr_value_do",
  "do",
  "@4",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@5",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@6",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_no_kwarg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@18",
  "@19",
  "f_args",
  "do_block",
  "@20",
  "@21",
  "do_body",
  "@22",
  "operation3",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "cases",
  "p_top_expr",
  "p_cases",
  "@28",
  "@29",
  "p_top_expr_body",
  "p_args",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@30",
  "@31",
  "@32",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_kwarg",
  "p_kwrest",
  "p_kwnorest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "kwrest_mark",
  "p_primitive",
  "p_var_ref",
  "@33",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@34",
  "ssym",
  "dsym",
  "@35",
  "args_tail",
  "@36",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      @current_arg_stack.push(nil)
                      @max_numparam_stack.push
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]

                      @current_arg_stack.pop
                      @max_numparam_stack.pop
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = val
                    
    result
end

def _reduce_11(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_13(val, _values, result)
                      result = []
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_19(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_23(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 31 omitted

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_34(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_44(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 47 omitted

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_51(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_52(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_53(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_54(val, _values, result)
                      @pattern_variables.pop
                      @lexer.in_kwarg = val[2]
                      if @builder.class.emit_match_pattern
                        result = @builder.match_pattern(val[0], val[1], val[3])
                      else
                        result = @builder.in_match(val[0], val[1], val[3])
                      end
                    
    result
end

# reduce 55 omitted

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_58(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 65 omitted

def _reduce_66(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_85(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 91 omitted

def _reduce_92(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_100(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_112(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_115(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 116 omitted

def _reduce_117(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_118(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_119(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 126 omitted

def _reduce_127(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_128(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_129(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

def _reduce_201(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_207(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_208(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 229 omitted

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_249(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_257(val, _values, result)
                      result = val
                    
    result
end

def _reduce_258(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = []
                    
    result
end

# reduce 262 omitted

# reduce 263 omitted

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_265(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_268(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_269(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_270(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_271(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_272(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_274(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_275(val, _values, result)
                      result = []
                    
    result
end

def _reduce_276(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_277(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 281 omitted

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_296(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_297(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_298(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_310(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_314(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 315 omitted

def _reduce_316(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_317(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_318(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_319(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_320(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_323(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_324(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_325(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_326(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_327(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_328(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_329(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_331(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:module)
                    
    result
end

def _reduce_332(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_333(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                      @current_arg_stack.push(nil)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_335(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_336(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                      @current_arg_stack.push(nil)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_338(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_339(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_340(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_341(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 342 omitted

def _reduce_343(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 344 omitted

# reduce 345 omitted

def _reduce_346(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 351 omitted

def _reduce_352(val, _values, result)
                      result = val
                    
    result
end

# reduce 353 omitted

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = []
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_380(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_381(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 387 omitted

def _reduce_388(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_389(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_390(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_391(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_392(val, _values, result)
                      result = []
                    
    result
end

def _reduce_393(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_394(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_395(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_396(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_399(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_400(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_401(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_402(val, _values, result)
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_403(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_404(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_405(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_406(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_407(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_408(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_409(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_415(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_416(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_417(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_418(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_419(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_420(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_422(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_423(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_424(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_426(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_427(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_428(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_429(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_430(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_431(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_432(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 433 omitted

def _reduce_434(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_435(val, _values, result)
                      @pattern_hash_keys.pop
                      @pattern_variables.pop
                      @lexer.in_kwarg = val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_444(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 454 omitted

def _reduce_455(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_456(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_457(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_458(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_459(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_460(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_461(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_462(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.array_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_464(val, _values, result)
                      @pattern_hash_keys.push
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = false
                    
    result
end

def _reduce_465(val, _values, result)
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_467(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_468(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_472(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_473(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_475(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 476 omitted

def _reduce_477(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = [ item ]
                    
    result
end

def _reduce_478(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1], val[2])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_479(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest ]
                    
    result
end

def _reduce_480(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest, *val[3] ]
                    
    result
end

def _reduce_481(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest ]
                    
    result
end

def _reduce_482(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest, *val[2] ]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 485 omitted

def _reduce_486(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_487(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_490(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_493(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                    result = [:label, val[0]]
                  
    result
end

def _reduce_497(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_498(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0], val[1]) ]
                    
    result
end

# reduce 501 omitted

def _reduce_502(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_505(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

def _reduce_509(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 511 omitted

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_520(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_521(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_522(val, _values, result)
                      result = @builder.match_var(val[0])
                    
    result
end

def _reduce_523(val, _values, result)
                      name = val[1][0]
                      unless static_env.declared?(name)
                        diagnostic :error, :undefined_lvar, { :name => name }, val[1]
                      end

                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_524(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_527(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_528(val, _values, result)
                      result = []
                    
    result
end

def _reduce_529(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 530 omitted

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 533 omitted

def _reduce_534(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

def _reduce_538(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_539(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_541(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_542(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_543(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_544(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_545(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_546(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = []
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_549(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_552(val, _values, result)
                      result = []
                    
    result
end

def _reduce_553(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_554(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_555(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_556(val, _values, result)
                      result = []
                    
    result
end

def _reduce_557(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_558(val, _values, result)
                      result = []
                    
    result
end

def _reduce_559(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_560(val, _values, result)
                      result = []
                    
    result
end

def _reduce_561(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = []
                    
    result
end

def _reduce_563(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_564(val, _values, result)
                      result = []
                    
    result
end

def _reduce_565(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_566(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_567(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_568(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_569(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_570(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_572(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_577(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_579(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_580(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_581(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_582(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_583(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_584(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_586(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_587(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_588(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_590(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_592(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_593(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      if (node = val[0]) && node.type == :ident
                        name = node.children[0]

                        if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && context.in_dynamic_block?
                          # definitely an implicit param
                          location = node.loc.expression

                          if max_numparam_stack.has_ordinary_params?
                            diagnostic :error, :ordinary_param_defined, nil, [nil, location]
                          end

                          raw_context = context.stack.dup
                          raw_max_numparam_stack = max_numparam_stack.stack.dup

                          # ignore current block scope
                          raw_context.pop
                          raw_max_numparam_stack.pop

                          raw_context.reverse_each do |outer_scope|
                            if outer_scope == :block || outer_scope == :lambda
                              outer_scope_has_numparams = raw_max_numparam_stack.pop > 0

                              if outer_scope_has_numparams
                                diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
                              else
                                # for now it's ok, but an outer scope can also be a block
                                # with numparams, so we need to continue
                              end
                            else
                              # found an outer scope that can't have numparams
                              # like def/class/etc
                              break
                            end
                          end

                          static_env.declare(name)
                          max_numparam_stack.register(name[1].to_i)
                        end
                      end

                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_600(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_601(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_602(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_603(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_604(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_605(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_606(val, _values, result)
                      result = @builder.forward_only_args(val[0], val[1], val[2])
                      @static_env.declare_forward_args

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_607(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_608(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_609(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_610(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_611(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_612(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_613(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_614(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_615(val, _values, result)
                      result = []
                    
    result
end

def _reduce_616(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_617(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_618(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_619(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_620(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_621(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_622(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_623(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_624(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_625(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_626(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_627(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_628(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_629(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_630(val, _values, result)
                      result = []
                    
    result
end

def _reduce_631(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_632(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_633(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_634(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_635(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 636 omitted

def _reduce_637(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_638(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_639(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_640(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_641(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_642(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_643(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])

                      result = val[0]
                    
    result
end

def _reduce_644(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_645(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_646(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_647(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_648(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_649(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_650(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_651(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 652 omitted

# reduce 653 omitted

def _reduce_654(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_655(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_656(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_657(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_658(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_659(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_660(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_661(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_662(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 663 omitted

# reduce 664 omitted

def _reduce_665(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_666(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 667 omitted

# reduce 668 omitted

def _reduce_669(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_670(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_671(val, _values, result)
                      result = []
                    
    result
end

# reduce 672 omitted

def _reduce_673(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_674(val, _values, result)
                      result = []
                    
    result
end

# reduce 675 omitted

def _reduce_676(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_677(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_678(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_679(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_680(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_681(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 682 omitted

# reduce 683 omitted

# reduce 684 omitted

# reduce 685 omitted

# reduce 686 omitted

# reduce 687 omitted

# reduce 688 omitted

# reduce 689 omitted

# reduce 690 omitted

# reduce 691 omitted

# reduce 692 omitted

# reduce 693 omitted

def _reduce_694(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_695(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 696 omitted

# reduce 697 omitted

# reduce 698 omitted

# reduce 699 omitted

def _reduce_700(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_701(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_702(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 703 omitted

# reduce 704 omitted

# reduce 705 omitted

def _reduce_706(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 707 omitted

# reduce 708 omitted

# reduce 709 omitted

def _reduce_710(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby27
  end   # module Parser
