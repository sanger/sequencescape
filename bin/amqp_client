#!/usr/bin/env ruby
# Starts up one or more amqp observers

require 'daemons'
require 'bunny'
require 'rails'
require './lib/postman'
require './lib/postman/channel'

APP_PATH = File.expand_path('../config/application', __dir__)

class AmqpClient
  APP_NAME = 'queue_broadcast_consumer'.freeze
  DEFAULT_WORKERS = 2
  DEFAULT_PID_DIR = './tmp/pids'.freeze

  NotImplimented = Class.new(StandardError)

  class WorkerPool
    def initialize(app_name, pid_dir, workers, instance, config = nil)
      @app_name = app_name
      @pid_dir = pid_dir
      @worker_count = workers
      @instance = instance
      @config = config
    end

    def worker_count
      @instance ? 1 : @worker_count
    end

    def start!
      worker_count.times do |i|
        daemon(@instance || i)
      end
    end

    def server_name(i)
      "#{@app_name}_num#{i}"
    end

    def multiple
      @instance.nil?
    end

    # We preload our application before forking!
    def load_rails!
      puts 'Loading application...'
      require_relative '../config/environment'
      # We need to disconnect before forking.
      ActiveRecord::Base.connection.disconnect!
      puts 'Loaded!'
    end

    def config
      @config ||= Rails.application.config.warren.symbolize_keys
    end

    def server_config
      config.dig(:config, 'server').deep_symbolize_keys || {}
    end

    def queue_config
      config.dig(:subscriptions, @app_name).deep_symbolize_keys
    end

    def daemon(instance)
      Daemons.run_proc(server_name(instance), multiple: multiple, dir: @pid_dir, backtrace: true, log_output: true) do
        ActiveRecord::Base.establish_connection # We reconnect to the database after the fork.
        client = Bunny.new(server_config)
        main_exchange = Postman::Channel.new(client: client, config: queue_config)
        Postman.new(
          client: client,
          main_exchange: main_exchange
        ).run!
      end
    end
  end

  attr_reader :workers, :instance, :pid_dir

  def initialize(args)
    @action = args.first
    # TODO: DRY this out
    self.workers = args.detect { |arg| arg =~ /\Aw[0-9]+\z/ }
    self.instance = args.detect { |arg| arg =~ /\Ai[0-9]+\z/ }
    self.pid_dir = args.detect { |arg| arg =~ /\Apid_dir=.+\z/ }
  end

  # TODO: DRY this out
  def workers=(workers_config)
    @workers = if workers_config.nil?
                 DEFAULT_WORKERS
               else
                 workers_config.slice(1, workers_config.length).to_i
               end
  end

  def pid_dir=(pid_dir_config)
    @pid_dir = if pid_dir_config.nil?
                 DEFAULT_PID_DIR
               else
                 /\Apid_dir=(.+)\z/.match(pid_dir_config)[1]
               end
  end

  def instance=(instance_config)
    @instance = instance_config.slice(1, instance_config.length).to_i if instance_config.present?
  end

  def worker_pool
    @wp ||= WorkerPool.new(APP_NAME, pid_dir, worker_count, instance)
  end

  def run
    worker_pool.load_rails! if preload_required?
    worker_pool.start!
  end

  # Only bother loading rails if necessary
  def preload_required?
    %w[start restart reload run].include?(@action)
  end

  # If we're not daemonising we limit ourselves to one worker.
  # Otherwise we end up running our various workers in series
  # which isn't really what we want.
  def worker_count
    @action == 'run' ? 1 : workers
  end
end

AmqpClient.new(ARGV).run
