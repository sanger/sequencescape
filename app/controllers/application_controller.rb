require "exceptions"

# Filters added to this controller apply to all controllers in the application.
# Likewise, all the methods added will be available for all controllers.

class ApplicationController < ActionController::Base
  helper :all # include all helpers, all the time

  # See ActionController::RequestForgeryProtection for details
  # Uncomment the :secret if you're not using the cookie session store
  protect_from_forgery # :secret => "4418f0a814148fc28a0a38971e433b7d"

  # See ActionController::Base for details
  # Uncomment this to filter the contents of submitted sensitive data parameters
  # from your application log (in this case, all fields with names like "password").
  # filter_parameter_logging :password

  # Provide authentication, and "remember me"
  include AuthenticatedSystem
  before_filter :login_required
  before_filter :extract_header_info
  filter_parameter_logging :password, :credential_1, :uploaded_data

  rescue_from SingleSignOn::ServerError, :with => :sso_not_available

  #clean parameters hash from :check generated by checktext_field fields.
  def clean_params_from_check(object)
    return object unless object.is_a?(Hash)
    new_hash = object.class.new
    to_nil = []
    object.each do |k, v|
      if k == "check" and v.is_a?(Hash)
        v.each do |k, v|
        to_nil << k unless v == "true"
        end
      else # normal
        new_hash[k] = clean_params_from_check(v)
      end
    end

    to_nil.each do |k|
      new_hash[k] = nil
    end
    new_hash

  end
  
  private
  def sso_not_available
    flash[:warning] = I18n.t("errors.single_sign_on_unavailable")
    if request.xhr?
      render :partial => "layouts/readable_error", :status => 503
    else
      render :layout => "errors", :partial => "layouts/readable_error", :status => 503
    end
  end

  public

  def block_api_access(message = nil, format = :xml)
    content = {:error => "Unsupported API access"}
    content[:message] = message unless message.nil?
    { format => content.send("to_#{format}".to_sym, :root => :errors), :status => 406 }
  end

  def extract_header_info
    exclude_nested_resource = request.headers["HTTP_EXCLUDE_NESTED_RESOURCE"] || params[:exclude_nested_resource] 
    @exclude_nested_resource = exclude_nested_resource && exclude_nested_resource.to_s.downcase == "true"
  end

  def first_param(key)
    value  = params[key]
    value ? value.first : nil
  end
  #--
  # We are using flash irresponsibly, using it as a convenient way to get error messages displayed on the
  # page we are rendering, rather than as a mechanism to pass those messages across redirects.  Because
  # this is so prevalent this 'action_flash' has been created for the former cases.
  #
  # TODO: remove this once the code has been converted across to properly using model error messages.
  #++
  def action_flash
    @action_flash ||= {}
  end
  helper_method(:action_flash)
end
