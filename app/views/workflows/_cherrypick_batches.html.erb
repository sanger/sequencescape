<!--% form_for @batch, :url => {:controller => :batches, :action => :qc_batch, :id => @batch.id, :task_id => @task.id }, :html => { :id => 'stage_form'} do |form| %-->
<% form_for @workflow, :url => { :action => "stage", :id => @stage, :workflow_id => @workflow.id, :batch_id => @batch.id, :next_stage => true }, :html => { :id => "stage_form"} do |form| %>

  <% plate_class = {}%>
  <h4>Source Plates</h4>
  <table id="source_plates" class="plate">
    <% @source_plate_ids.to_a.in_groups_of(12).each do |plate_ids| -%>
      <tr>
        <% plate_ids.compact.each_with_index do |source_plate_id,index| -%>
          <% plate_class[source_plate_id] = "colour#{index%12}" -%>
          <td class="<%= plate_class[source_plate_id] %>"><%= source_plate_id %></td>
        <% end %>
      </tr>
    <% end %>
  </table>

  <% plate_ids = [] %>
  <% @plates.each_with_index do |plate,index| -%>
    <%= render :partial => "plate", :locals => {:plate_cols =>@plate_cols, :plate_rows => @plate_rows, :plate => plate, :index => index, :plate_class => plate_class} %>

    <% @plate_rows.times { |row_index| plate_ids << "plate[#{index}][#{row_index}]" } %>
  <% end -%>

  <%= render :partial => "scratch_pad", :locals => {:plate_cols =>@plate_cols, :plate_rows => @plate_rows,:plate_class => plate_class, :plate_ids => plate_ids } %>

<% if @plate.nil? -%>
  <script type="text/javascript">
    (function($, undefined) {
      /* 
       * Sortable only supports direct child elements, which have to have an 'id' attribute.  Hence this Sortable's of each
       * row in the the plate tables, and allows dragging between them and the scratch pad.
       */
      <% plate_ids.each do |plate| %>
      Sortable.create('<%= plate %>', { containment: ['<%= plate_ids.join("','") %>'], tag: 'td', overlap: 'horizontal' });
      <% end%>
    })($);
  </script>
<% end -%>

  <%= hidden_field_tag 'minimum_volume', @minimum_volume    %>
  <%= hidden_field_tag 'maximum_volume', @maximum_volume    %>
  <%= hidden_field_tag 'total_nano_grams', @total_nano_grams  %>
  <%= hidden_field_tag 'cherrypick_action', @cherrypick_action %>
  <%= hidden_field_tag 'plate_type', @plate_type %>
  <%= hidden_field_tag 'volume_required', @volume_required %>
  <%= hidden_field_tag 'concentration_required', @concentration_required %>
  <%= hidden_field_tag 'micro_litre_volume_required', @micro_litre_volume_required %>

  <%= render(:partial => 'next_stage_submit', :locals => { :check_selection => true }) %>
<% end %>

<script type="text/javascript">
  (function($, undefined) {
    return $('#stage_button').click(function() {
      return verifyplate(<%= @plate_cols %>, <%= @plate_rows %>, <%= @plates.size %>);
    });
  })(jQuery);

  // WARNING: '$' is using prototype *not* jQuery, and it's as ugly as hell!
  function verifyplate(num_cols,num_rows,num_plates) {
    var hiddenFields = '';
    for(var p =0; p < num_plates; p++) {
      for(var r = 0 ; r < num_rows; r++) {
        var col_length = $('plate['+p+']['+r+']').children.length;
        if((col_length-1) > num_cols) {
          alert('All rows must have '+num_cols+' wells ');
          return false;
        }

        for(var c = 1; c <= num_cols; c++) {
          var value = (c >= col_length) ? '' : $('plate['+p+']['+r+']').children[c].id;
          hiddenFields += '<input type="hidden" name="plate['+p+']['+r+']['+(c-1)+']" value="'+value+'"/>';
        }
      }
    }

    jQuery('#stage_form').append(hiddenFields);
    return true;
  }
</script>
